GAS LISTING /tmp/ccLwBXNc.s 			page 1


   1              		.file	"syscall_c.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_Z9mem_allocm
   9              	_Z9mem_allocm:
  10              	.LFB28:
  11              		.file 1 "src/syscall_c.cpp"
   1:src/syscall_c.cpp **** #include "../h/syscall_c.hpp"
   2:src/syscall_c.cpp **** 
   3:src/syscall_c.cpp **** 
   4:src/syscall_c.cpp **** void *mem_alloc(size_t size) {
  12              		.loc 1 4 30
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FE 		addi	sp,sp,-32
  16              		.cfi_def_cfa_offset 32
  17 0004 233C8100 		sd	s0,24(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040102 		addi	s0,sp,32
  20              		.cfi_def_cfa 8, 0
   5:src/syscall_c.cpp ****     size_t sizeInBlocks = ((size + 16 + MEM_BLOCK_SIZE - 1) / MEM_BLOCK_SIZE);
  21              		.loc 1 5 5
  22              		.loc 1 5 56 is_stmt 0
  23 000c 1305F504 		addi	a0,a0,79
  24              	.LVL1:
  25              		.loc 1 5 12
  26 0010 13556500 		srli	a0,a0,6
  27              	.LVL2:
   6:src/syscall_c.cpp ****     Riscv::w_a0(0x01);
  28              		.loc 1 6 5 is_stmt 1
  29              	.LBB10:
  30              	.LBB11:
  31              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   2:src/../h/riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   3:src/../h/riscv.hpp **** 
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #include "../h/MemoryAllocator.hpp"
   6:src/../h/riscv.hpp **** 
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #define readUsrReg(reg, dst) __asm__ volatile("mv %0,"#reg : "=r" (dst));
   9:src/../h/riscv.hpp **** #define writeUsrReg(reg, src) __asm__ volatile("mv "#reg", %0" : : "r" (src));
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp **** class Riscv
  13:src/../h/riscv.hpp **** {
  14:src/../h/riscv.hpp **** public:
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp **** 
  18:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  19:src/../h/riscv.hpp ****     static void popSppSpie();
  20:src/../h/riscv.hpp **** 
  21:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
GAS LISTING /tmp/ccLwBXNc.s 			page 2


  22:src/../h/riscv.hpp ****     static void pushRegisters();
  23:src/../h/riscv.hpp **** 
  24:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  25:src/../h/riscv.hpp ****     static void popRegisters();
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // read register scause
  28:src/../h/riscv.hpp ****     static uint64 r_scause();
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // write register scause
  31:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // read register sepc
  34:src/../h/riscv.hpp ****     static uint64 r_sepc();
  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // write register sepc
  37:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // read register stvec
  40:src/../h/riscv.hpp ****     static uint64 r_stvec();
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // write register stvec
  43:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // read register stval
  46:src/../h/riscv.hpp ****     static uint64 r_stval();
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // write register stval
  49:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     enum BitMaskSip
  52:src/../h/riscv.hpp ****     {
  53:src/../h/riscv.hpp **** //        SIP_SSIE = (1 << 1),
  54:src/../h/riscv.hpp **** //        SIP_STIE = (1 << 5),
  55:src/../h/riscv.hpp **** //        SIP_SEIE = (1 << 9),
  56:src/../h/riscv.hpp ****         SIP_SSIP = (1<<1),
  57:src/../h/riscv.hpp ****         SIP_SEIP = (1<<9)
  58:src/../h/riscv.hpp ****     };
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // mask set register sip
  61:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     // mask clear register sip
  64:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // read register sip
  67:src/../h/riscv.hpp ****     static uint64 r_sip();
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // write register sip
  70:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     enum BitMaskSstatus
  73:src/../h/riscv.hpp ****     {
  74:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  75:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  76:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  77:src/../h/riscv.hpp ****     };
  78:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccLwBXNc.s 			page 3


  79:src/../h/riscv.hpp ****     // mask set register sstatus
  80:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // mask clear register sstatus
  83:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // read register sstatus
  86:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     // write register sstatus
  89:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     // mask set register sie
  92:src/../h/riscv.hpp ****     static void ms_sie(uint64 mask);
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp ****     // mask clear register sie
  95:src/../h/riscv.hpp ****     static void mc_sie(uint64 mask);
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     static void supervisorTrap();
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp ****     static long r_a0();
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp ****     static void w_a0(long a0);
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp ****     static uint64 r_a1();
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp ****     static void w_a1(uint64 a1);
 106:src/../h/riscv.hpp **** 
 107:src/../h/riscv.hpp ****     static void push_a0(long a0);
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp **** private:
 110:src/../h/riscv.hpp ****     static void trapHandler();
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** };
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 116:src/../h/riscv.hpp **** {
 117:src/../h/riscv.hpp ****     uint64 volatile scause;
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 119:src/../h/riscv.hpp ****     return scause;
 120:src/../h/riscv.hpp **** }
 121:src/../h/riscv.hpp **** 
 122:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 123:src/../h/riscv.hpp **** {
 124:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 125:src/../h/riscv.hpp **** }
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 128:src/../h/riscv.hpp **** {
 129:src/../h/riscv.hpp ****     uint64 volatile sepc;
 130:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 131:src/../h/riscv.hpp ****     return sepc;
 132:src/../h/riscv.hpp **** }
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 135:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccLwBXNc.s 			page 4


 136:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 137:src/../h/riscv.hpp **** }
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 140:src/../h/riscv.hpp **** {
 141:src/../h/riscv.hpp ****     uint64 volatile stvec;
 142:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 143:src/../h/riscv.hpp ****     return stvec;
 144:src/../h/riscv.hpp **** }
 145:src/../h/riscv.hpp **** 
 146:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 147:src/../h/riscv.hpp **** {
 148:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 149:src/../h/riscv.hpp **** }
 150:src/../h/riscv.hpp **** 
 151:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 152:src/../h/riscv.hpp **** {
 153:src/../h/riscv.hpp ****     uint64 volatile stval;
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 155:src/../h/riscv.hpp ****     return stval;
 156:src/../h/riscv.hpp **** }
 157:src/../h/riscv.hpp **** 
 158:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 159:src/../h/riscv.hpp **** {
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 161:src/../h/riscv.hpp **** }
 162:src/../h/riscv.hpp **** 
 163:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 164:src/../h/riscv.hpp **** {
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 166:src/../h/riscv.hpp **** }
 167:src/../h/riscv.hpp **** 
 168:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 169:src/../h/riscv.hpp **** {
 170:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 171:src/../h/riscv.hpp **** }
 172:src/../h/riscv.hpp **** 
 173:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 174:src/../h/riscv.hpp **** {
 175:src/../h/riscv.hpp ****     uint64 volatile sip;
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 177:src/../h/riscv.hpp ****     return sip;
 178:src/../h/riscv.hpp **** }
 179:src/../h/riscv.hpp **** 
 180:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 181:src/../h/riscv.hpp **** {
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 183:src/../h/riscv.hpp **** }
 184:src/../h/riscv.hpp **** 
 185:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 186:src/../h/riscv.hpp **** {
 187:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 188:src/../h/riscv.hpp **** }
 189:src/../h/riscv.hpp **** 
 190:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 191:src/../h/riscv.hpp **** {
 192:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
GAS LISTING /tmp/ccLwBXNc.s 			page 5


 193:src/../h/riscv.hpp **** }
 194:src/../h/riscv.hpp **** 
 195:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 196:src/../h/riscv.hpp **** {
 197:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 198:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 199:src/../h/riscv.hpp ****     return sstatus;
 200:src/../h/riscv.hpp **** }
 201:src/../h/riscv.hpp **** 
 202:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 203:src/../h/riscv.hpp **** {
 204:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 205:src/../h/riscv.hpp **** }
 206:src/../h/riscv.hpp **** 
 207:src/../h/riscv.hpp **** inline void Riscv::ms_sie(uint64 mask)
 208:src/../h/riscv.hpp **** {
 209:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sie, %[mask]" : : [mask] "r"(mask));
 210:src/../h/riscv.hpp **** }
 211:src/../h/riscv.hpp **** 
 212:src/../h/riscv.hpp **** inline void Riscv::mc_sie(uint64 mask)
 213:src/../h/riscv.hpp **** {
 214:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sie, %[mask]" : : [mask] "r"(mask));
 215:src/../h/riscv.hpp **** }
 216:src/../h/riscv.hpp **** 
 217:src/../h/riscv.hpp **** inline long Riscv::r_a0() {
 218:src/../h/riscv.hpp ****     long volatile a0;
 219:src/../h/riscv.hpp ****     __asm__ volatile ("ld %0, 10*8(fp)" : "=r"(a0));
 220:src/../h/riscv.hpp ****     return a0;
 221:src/../h/riscv.hpp **** }
 222:src/../h/riscv.hpp **** 
 223:src/../h/riscv.hpp **** inline void Riscv::w_a0(long a0) {
 224:src/../h/riscv.hpp ****     __asm__ volatile ("mv a0, %0" : : "r"(a0));
  32              		.loc 2 224 5
  33              		.loc 2 224 47 is_stmt 0
  34 0014 93071000 		li	a5,1
  35              	#APP
  36              	# 224 "src/../h/riscv.hpp" 1
 225              	}
  37              		mv a0, a5
  38              	# 0 "" 2
  39              	.LVL3:
  40              	#NO_APP
  41              	.LBE11:
  42              	.LBE10:
   7:src/syscall_c.cpp ****     Riscv::w_a1((uint64)sizeInBlocks);
  43              		.loc 1 7 5 is_stmt 1
  44              	.LBB12:
  45              	.LBB13:
 226:src/../h/riscv.hpp **** 
 227:src/../h/riscv.hpp **** inline uint64 Riscv::r_a1() {
 228:src/../h/riscv.hpp ****     uint64 volatile a1;
 229:src/../h/riscv.hpp ****     __asm__ volatile ("ld %0, 11*8(fp)" : "=r"(a1));
 230:src/../h/riscv.hpp ****     return a1;
 231:src/../h/riscv.hpp **** }
 232:src/../h/riscv.hpp **** 
 233:src/../h/riscv.hpp **** inline void Riscv::w_a1(uint64 a1) {
 234:src/../h/riscv.hpp ****     __asm__ volatile ("mv a1, %0" : : "r"(a1));
GAS LISTING /tmp/ccLwBXNc.s 			page 6


  46              		.loc 2 234 5
  47              		.loc 2 234 47 is_stmt 0
  48              	#APP
  49              	# 234 "src/../h/riscv.hpp" 1
 235              	}
  50              		mv a1, a0
  51              	# 0 "" 2
  52              	.LVL4:
  53              	#NO_APP
  54              	.LBE13:
  55              	.LBE12:
   8:src/syscall_c.cpp **** 
   9:src/syscall_c.cpp ****     __asm__ volatile ("ecall");
  56              		.loc 1 9 5 is_stmt 1
  57              		.loc 1 9 31 is_stmt 0
  58              	#APP
  59              	# 9 "src/syscall_c.cpp" 1
  10              	
  11:src/syscall_c.cpp ****     volatile long a0;
  60              		ecall
  61              	# 0 "" 2
  62              		.loc 1 11 5 is_stmt 1
  12:src/syscall_c.cpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
  63              		.loc 1 12 5
  64              		.loc 1 12 46 is_stmt 0
  65              	# 12 "src/syscall_c.cpp" 1
  13              	    return (void*)a0;
  66              		mv a5, a0
  67              	# 0 "" 2
  68              	#NO_APP
  69 0028 2334F4FE 		sd	a5,-24(s0)
  70              		.loc 1 13 5 is_stmt 1
  71              		.loc 1 13 19 is_stmt 0
  72 002c 033584FE 		ld	a0,-24(s0)
  73              	.LVL5:
  14:src/syscall_c.cpp **** }
  74              		.loc 1 14 1
  75 0030 03348101 		ld	s0,24(sp)
  76              		.cfi_restore 8
  77              		.cfi_def_cfa 2, 32
  78 0034 13010102 		addi	sp,sp,32
  79              		.cfi_def_cfa_offset 0
  80 0038 67800000 		jr	ra
  81              		.cfi_endproc
  82              	.LFE28:
  84              		.align	2
  85              		.globl	_Z8mem_freePv
  87              	_Z8mem_freePv:
  88              	.LFB29:
  15:src/syscall_c.cpp **** 
  16:src/syscall_c.cpp **** int mem_free(void * ptr) {
  89              		.loc 1 16 26 is_stmt 1
  90              		.cfi_startproc
  91              	.LVL6:
  92 003c 130101FE 		addi	sp,sp,-32
  93              		.cfi_def_cfa_offset 32
  94 0040 233C8100 		sd	s0,24(sp)
GAS LISTING /tmp/ccLwBXNc.s 			page 7


  95              		.cfi_offset 8, -8
  96 0044 13040102 		addi	s0,sp,32
  97              		.cfi_def_cfa 8, 0
  17:src/syscall_c.cpp ****     Riscv::w_a0(0x02);
  98              		.loc 1 17 5
  99              	.LVL7:
 100              	.LBB14:
 101              	.LBB15:
 224:src/../h/riscv.hpp **** }
 102              		.loc 2 224 5
 224:src/../h/riscv.hpp **** }
 103              		.loc 2 224 47 is_stmt 0
 104 0048 93072000 		li	a5,2
 105              	#APP
 106              	# 224 "src/../h/riscv.hpp" 1
 107              		mv a0, a5
 108              	# 0 "" 2
 109              	.LVL8:
 110              	#NO_APP
 111              	.LBE15:
 112              	.LBE14:
  18:src/syscall_c.cpp ****     Riscv::w_a1((uint64)ptr);
 113              		.loc 1 18 5 is_stmt 1
 114              	.LBB16:
 115              	.LBB17:
 234:src/../h/riscv.hpp **** }
 116              		.loc 2 234 5
 234:src/../h/riscv.hpp **** }
 117              		.loc 2 234 47 is_stmt 0
 118              	#APP
 119              	# 234 "src/../h/riscv.hpp" 1
 120              		mv a1, a0
 121              	# 0 "" 2
 122              	.LVL9:
 123              	#NO_APP
 124              	.LBE17:
 125              	.LBE16:
  19:src/syscall_c.cpp **** 
  20:src/syscall_c.cpp ****     __asm__ volatile ("ecall");
 126              		.loc 1 20 5 is_stmt 1
 127              		.loc 1 20 31 is_stmt 0
 128              	#APP
 129              	# 20 "src/syscall_c.cpp" 1
  21              	
  22:src/syscall_c.cpp ****     volatile long a0;
 130              		ecall
 131              	# 0 "" 2
 132              		.loc 1 22 5 is_stmt 1
  23:src/syscall_c.cpp ****     __asm__ volatile ("mv %0, a0" : "=r"(a0));
 133              		.loc 1 23 5
 134              		.loc 1 23 46 is_stmt 0
 135              	# 23 "src/syscall_c.cpp" 1
  24              	    return a0;
 136              		mv a5, a0
 137              	# 0 "" 2
 138              	#NO_APP
 139 005c 2334F4FE 		sd	a5,-24(s0)
GAS LISTING /tmp/ccLwBXNc.s 			page 8


 140              		.loc 1 24 5 is_stmt 1
 141              		.loc 1 24 12 is_stmt 0
 142 0060 033584FE 		ld	a0,-24(s0)
 143              	.LVL10:
  25:src/syscall_c.cpp **** }
 144              		.loc 1 25 1
 145 0064 1B050500 		sext.w	a0,a0
 146 0068 03348101 		ld	s0,24(sp)
 147              		.cfi_restore 8
 148              		.cfi_def_cfa 2, 32
 149 006c 13010102 		addi	sp,sp,32
 150              		.cfi_def_cfa_offset 0
 151 0070 67800000 		jr	ra
 152              		.cfi_endproc
 153              	.LFE29:
 155              	.Letext0:
 156              		.file 3 "src/../h/../h/../lib/hw.h"
GAS LISTING /tmp/ccLwBXNc.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 syscall_c.cpp
     /tmp/ccLwBXNc.s:9      .text:0000000000000000 _Z9mem_allocm
     /tmp/ccLwBXNc.s:13     .text:0000000000000000 .L0 
     /tmp/ccLwBXNc.s:15     .text:0000000000000000 .L0 
     /tmp/ccLwBXNc.s:16     .text:0000000000000004 .L0 
     /tmp/ccLwBXNc.s:18     .text:0000000000000008 .L0 
     /tmp/ccLwBXNc.s:20     .text:000000000000000c .L0 
     /tmp/ccLwBXNc.s:22     .text:000000000000000c .L0 
     /tmp/ccLwBXNc.s:23     .text:000000000000000c .L0 
     /tmp/ccLwBXNc.s:26     .text:0000000000000010 .L0 
     /tmp/ccLwBXNc.s:32     .text:0000000000000014 .L0 
     /tmp/ccLwBXNc.s:33     .text:0000000000000014 .L0 
     /tmp/ccLwBXNc.s:34     .text:0000000000000014 .L0 
     /tmp/ccLwBXNc.s:46     .text:000000000000001c .L0 
     /tmp/ccLwBXNc.s:47     .text:000000000000001c .L0 
  src/../h/riscv.hpp:234    .text:000000000000001c .L0 
     /tmp/ccLwBXNc.s:57     .text:0000000000000020 .L0 
   src/syscall_c.cpp:9      .text:0000000000000020 .L0 
     /tmp/ccLwBXNc.s:63     .text:0000000000000024 .L0 
     /tmp/ccLwBXNc.s:64     .text:0000000000000024 .L0 
   src/syscall_c.cpp:12     .text:0000000000000024 .L0 
     /tmp/ccLwBXNc.s:71     .text:000000000000002c .L0 
     /tmp/ccLwBXNc.s:72     .text:000000000000002c .L0 
     /tmp/ccLwBXNc.s:75     .text:0000000000000030 .L0 
     /tmp/ccLwBXNc.s:76     .text:0000000000000034 .L0 
     /tmp/ccLwBXNc.s:77     .text:0000000000000034 .L0 
     /tmp/ccLwBXNc.s:79     .text:0000000000000038 .L0 
     /tmp/ccLwBXNc.s:81     .text:000000000000003c .L0 
     /tmp/ccLwBXNc.s:87     .text:000000000000003c _Z8mem_freePv
     /tmp/ccLwBXNc.s:90     .text:000000000000003c .L0 
     /tmp/ccLwBXNc.s:92     .text:000000000000003c .L0 
     /tmp/ccLwBXNc.s:93     .text:0000000000000040 .L0 
     /tmp/ccLwBXNc.s:95     .text:0000000000000044 .L0 
     /tmp/ccLwBXNc.s:97     .text:0000000000000048 .L0 
     /tmp/ccLwBXNc.s:102    .text:0000000000000048 .L0 
     /tmp/ccLwBXNc.s:103    .text:0000000000000048 .L0 
     /tmp/ccLwBXNc.s:104    .text:0000000000000048 .L0 
     /tmp/ccLwBXNc.s:116    .text:0000000000000050 .L0 
     /tmp/ccLwBXNc.s:117    .text:0000000000000050 .L0 
  src/../h/riscv.hpp:234    .text:0000000000000050 .L0 
     /tmp/ccLwBXNc.s:127    .text:0000000000000054 .L0 
   src/syscall_c.cpp:20     .text:0000000000000054 .L0 
     /tmp/ccLwBXNc.s:133    .text:0000000000000058 .L0 
     /tmp/ccLwBXNc.s:134    .text:0000000000000058 .L0 
   src/syscall_c.cpp:23     .text:0000000000000058 .L0 
     /tmp/ccLwBXNc.s:141    .text:0000000000000060 .L0 
     /tmp/ccLwBXNc.s:142    .text:0000000000000060 .L0 
     /tmp/ccLwBXNc.s:145    .text:0000000000000064 .L0 
     /tmp/ccLwBXNc.s:147    .text:000000000000006c .L0 
     /tmp/ccLwBXNc.s:148    .text:000000000000006c .L0 
     /tmp/ccLwBXNc.s:150    .text:0000000000000070 .L0 
     /tmp/ccLwBXNc.s:152    .text:0000000000000074 .L0 
     /tmp/ccLwBXNc.s:157    .text:0000000000000074 .L0 
     /tmp/ccLwBXNc.s:700    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccLwBXNc.s:1384   .debug_str:0000000000000427 .LASF78
     /tmp/ccLwBXNc.s:1310   .debug_str:000000000000020e .LASF79
GAS LISTING /tmp/ccLwBXNc.s 			page 10


     /tmp/ccLwBXNc.s:1274   .debug_str:00000000000000d2 .LASF80
     /tmp/ccLwBXNc.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccLwBXNc.s:155    .text:0000000000000074 .Letext0
     /tmp/ccLwBXNc.s:1238   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccLwBXNc.s:1336   .debug_str:00000000000002e1 .LASF0
     /tmp/ccLwBXNc.s:1342   .debug_str:00000000000002fb .LASF1
     /tmp/ccLwBXNc.s:1322   .debug_str:0000000000000272 .LASF2
     /tmp/ccLwBXNc.s:1308   .debug_str:0000000000000207 .LASF4
     /tmp/ccLwBXNc.s:1366   .debug_str:00000000000003ac .LASF3
     /tmp/ccLwBXNc.s:1256   .debug_str:000000000000005d .LASF5
     /tmp/ccLwBXNc.s:1344   .debug_str:000000000000030e .LASF6
     /tmp/ccLwBXNc.s:1334   .debug_str:00000000000002ce .LASF7
     /tmp/ccLwBXNc.s:1390   .debug_str:0000000000000502 .LASF8
     /tmp/ccLwBXNc.s:1300   .debug_str:00000000000001b9 .LASF9
     /tmp/ccLwBXNc.s:1350   .debug_str:0000000000000336 .LASF10
     /tmp/ccLwBXNc.s:1386   .debug_str:00000000000004eb .LASF11
     /tmp/ccLwBXNc.s:1262   .debug_str:000000000000006e .LASF12
     /tmp/ccLwBXNc.s:1244   .debug_str:0000000000000022 .LASF13
     /tmp/ccLwBXNc.s:1270   .debug_str:00000000000000b8 .LASF14
     /tmp/ccLwBXNc.s:1360   .debug_str:0000000000000371 .LASF15
     /tmp/ccLwBXNc.s:1276   .debug_str:00000000000000f5 .LASF16
     /tmp/ccLwBXNc.s:1340   .debug_str:00000000000002f5 .LASF81
     /tmp/ccLwBXNc.s:1358   .debug_str:0000000000000366 .LASF17
     /tmp/ccLwBXNc.s:1398   .debug_str:0000000000000538 .LASF19
     /tmp/ccLwBXNc.s:1254   .debug_str:000000000000004f .LASF18
     /tmp/ccLwBXNc.s:1286   .debug_str:0000000000000150 .LASF20
     /tmp/ccLwBXNc.s:1374   .debug_str:00000000000003e9 .LASF21
     /tmp/ccLwBXNc.s:1242   .debug_str:0000000000000008 .LASF22
     /tmp/ccLwBXNc.s:1246   .debug_str:0000000000000032 .LASF23
     /tmp/ccLwBXNc.s:1372   .debug_str:00000000000003d4 .LASF25
     /tmp/ccLwBXNc.s:1284   .debug_str:0000000000000147 .LASF27
     /tmp/ccLwBXNc.s:1282   .debug_str:0000000000000132 .LASF29
     /tmp/ccLwBXNc.s:1368   .debug_str:00000000000003be .LASF24
     /tmp/ccLwBXNc.s:1354   .debug_str:000000000000034e .LASF26
     /tmp/ccLwBXNc.s:1382   .debug_str:0000000000000420 .LASF28
     /tmp/ccLwBXNc.s:1376   .debug_str:00000000000003f6 .LASF30
     /tmp/ccLwBXNc.s:1296   .debug_str:00000000000001ab .LASF31
     /tmp/ccLwBXNc.s:1278   .debug_str:000000000000010b .LASF32
     /tmp/ccLwBXNc.s:1240   .debug_str:0000000000000000 .LASF33
     /tmp/ccLwBXNc.s:1304   .debug_str:00000000000001dd .LASF34
     /tmp/ccLwBXNc.s:1290   .debug_str:000000000000017c .LASF35
     /tmp/ccLwBXNc.s:1264   .debug_str:000000000000007e .LASF36
     /tmp/ccLwBXNc.s:1404   .debug_str:000000000000056c .LASF37
     /tmp/ccLwBXNc.s:1292   .debug_str:0000000000000184 .LASF38
     /tmp/ccLwBXNc.s:1338   .debug_str:00000000000002ee .LASF39
     /tmp/ccLwBXNc.s:1396   .debug_str:0000000000000525 .LASF40
     /tmp/ccLwBXNc.s:1252   .debug_str:0000000000000048 .LASF41
     /tmp/ccLwBXNc.s:1294   .debug_str:0000000000000198 .LASF42
     /tmp/ccLwBXNc.s:1298   .debug_str:00000000000001b3 .LASF43
     /tmp/ccLwBXNc.s:1380   .debug_str:000000000000040e .LASF44
     /tmp/ccLwBXNc.s:1250   .debug_str:0000000000000042 .LASF45
     /tmp/ccLwBXNc.s:1406   .debug_str:0000000000000574 .LASF46
     /tmp/ccLwBXNc.s:1402   .debug_str:0000000000000561 .LASF47
     /tmp/ccLwBXNc.s:1364   .debug_str:0000000000000394 .LASF48
     /tmp/ccLwBXNc.s:1314   .debug_str:0000000000000231 .LASF49
     /tmp/ccLwBXNc.s:1320   .debug_str:000000000000025a .LASF50
     /tmp/ccLwBXNc.s:1268   .debug_str:00000000000000ae .LASF51
GAS LISTING /tmp/ccLwBXNc.s 			page 11


     /tmp/ccLwBXNc.s:1306   .debug_str:00000000000001f1 .LASF52
     /tmp/ccLwBXNc.s:1326   .debug_str:0000000000000293 .LASF53
     /tmp/ccLwBXNc.s:1302   .debug_str:00000000000001c7 .LASF54
     /tmp/ccLwBXNc.s:1346   .debug_str:0000000000000321 .LASF55
     /tmp/ccLwBXNc.s:1280   .debug_str:000000000000011f .LASF56
     /tmp/ccLwBXNc.s:1248   .debug_str:000000000000003b .LASF57
     /tmp/ccLwBXNc.s:1324   .debug_str:0000000000000280 .LASF58
     /tmp/ccLwBXNc.s:1370   .debug_str:00000000000003c5 .LASF59
     /tmp/ccLwBXNc.s:1266   .debug_str:0000000000000092 .LASF60
     /tmp/ccLwBXNc.s:1378   .debug_str:0000000000000409 .LASF61
     /tmp/ccLwBXNc.s:1288   .debug_str:000000000000016b .LASF62
     /tmp/ccLwBXNc.s:1258   .debug_str:0000000000000064 .LASF63
     /tmp/ccLwBXNc.s:1328   .debug_str:000000000000029d .LASF64
     /tmp/ccLwBXNc.s:1318   .debug_str:0000000000000255 .LASF65
     /tmp/ccLwBXNc.s:1400   .debug_str:0000000000000550 .LASF66
     /tmp/ccLwBXNc.s:1260   .debug_str:0000000000000069 .LASF67
     /tmp/ccLwBXNc.s:1312   .debug_str:0000000000000220 .LASF68
     /tmp/ccLwBXNc.s:1388   .debug_str:00000000000004fa .LASF69
     /tmp/ccLwBXNc.s:1332   .debug_str:00000000000002ba .LASF70
     /tmp/ccLwBXNc.s:1330   .debug_str:00000000000002ae .LASF82
     /tmp/ccLwBXNc.s:1316   .debug_str:000000000000023c .LASF83
     /tmp/ccLwBXNc.s:1394   .debug_str:000000000000051c .LASF71
     /tmp/ccLwBXNc.s:1352   .debug_str:0000000000000345 .LASF72
     /tmp/ccLwBXNc.s:1348   .debug_str:0000000000000328 .LASF74
     /tmp/ccLwBXNc.s:88     .text:000000000000003c .LFB29
     /tmp/ccLwBXNc.s:153    .text:0000000000000074 .LFE29
     /tmp/ccLwBXNc.s:1143   .debug_loc:0000000000000000 .LLST4
     /tmp/ccLwBXNc.s:100    .text:0000000000000048 .LBB14
     /tmp/ccLwBXNc.s:112    .text:0000000000000050 .LBE14
     /tmp/ccLwBXNc.s:1157   .debug_loc:0000000000000039 .LLST5
     /tmp/ccLwBXNc.s:114    .text:0000000000000050 .LBB16
     /tmp/ccLwBXNc.s:125    .text:0000000000000054 .LBE16
     /tmp/ccLwBXNc.s:1165   .debug_loc:000000000000005d .LLST6
     /tmp/ccLwBXNc.s:1392   .debug_str:0000000000000512 .LASF73
     /tmp/ccLwBXNc.s:1272   .debug_str:00000000000000c4 .LASF75
     /tmp/ccLwBXNc.s:10     .text:0000000000000000 .LFB28
     /tmp/ccLwBXNc.s:82     .text:000000000000003c .LFE28
     /tmp/ccLwBXNc.s:1356   .debug_str:0000000000000361 .LASF76
     /tmp/ccLwBXNc.s:1172   .debug_loc:0000000000000080 .LLST0
     /tmp/ccLwBXNc.s:1362   .debug_str:0000000000000387 .LASF77
     /tmp/ccLwBXNc.s:1192   .debug_loc:00000000000000cf .LLST1
     /tmp/ccLwBXNc.s:29     .text:0000000000000014 .LBB10
     /tmp/ccLwBXNc.s:42     .text:000000000000001c .LBE10
     /tmp/ccLwBXNc.s:1210   .debug_loc:000000000000010c .LLST2
     /tmp/ccLwBXNc.s:44     .text:000000000000001c .LBB12
     /tmp/ccLwBXNc.s:55     .text:0000000000000020 .LBE12
     /tmp/ccLwBXNc.s:1218   .debug_loc:0000000000000130 .LLST3
     /tmp/ccLwBXNc.s:91     .text:000000000000003c .LVL6
     /tmp/ccLwBXNc.s:143    .text:0000000000000064 .LVL10
     /tmp/ccLwBXNc.s:99     .text:0000000000000048 .LVL7
     /tmp/ccLwBXNc.s:109    .text:0000000000000050 .LVL8
     /tmp/ccLwBXNc.s:122    .text:0000000000000054 .LVL9
     /tmp/ccLwBXNc.s:14     .text:0000000000000000 .LVL0
     /tmp/ccLwBXNc.s:24     .text:0000000000000010 .LVL1
     /tmp/ccLwBXNc.s:27     .text:0000000000000014 .LVL2
     /tmp/ccLwBXNc.s:73     .text:0000000000000030 .LVL5
     /tmp/ccLwBXNc.s:39     .text:000000000000001c .LVL3
GAS LISTING /tmp/ccLwBXNc.s 			page 12


     /tmp/ccLwBXNc.s:52     .text:0000000000000020 .LVL4
     /tmp/ccLwBXNc.s:158    .debug_info:0000000000000000 .Ldebug_info0

NO UNDEFINED SYMBOLS
