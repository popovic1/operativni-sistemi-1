GAS LISTING /tmp/ccIlsFBP.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_Z7createCm
   9              	_Z7createCm:
  10              	.LFB52:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** 
   2:src/main.cpp  **** #include "../h/riscv.hpp"
   3:src/main.cpp  **** #include "../h/syscall_c.hpp"
   4:src/main.cpp  **** #include "../h/print.hpp"
   5:src/main.cpp  **** #include "../h/PCB.hpp"
   6:src/main.cpp  **** #include "../h/syscall_cpp.hpp"
   7:src/main.cpp  **** 
   8:src/main.cpp  **** 
   9:src/main.cpp  **** struct A {
  10:src/main.cpp  ****     int a;
  11:src/main.cpp  ****     int* b = nullptr;
  12:src/main.cpp  **** };
  13:src/main.cpp  **** 
  14:src/main.cpp  **** struct B {
  15:src/main.cpp  ****     int a;
  16:src/main.cpp  ****     int* b = nullptr;
  17:src/main.cpp  ****     long c;
  18:src/main.cpp  ****     char d[50];
  19:src/main.cpp  **** };
  20:src/main.cpp  **** 
  21:src/main.cpp  **** class C{
  22:src/main.cpp  **** private:
  23:src/main.cpp  ****     uint64 num;
  24:src/main.cpp  **** 
  25:src/main.cpp  **** public:
  26:src/main.cpp  **** 
  27:src/main.cpp  ****     C(uint64 n){
  28:src/main.cpp  ****         num = n;
  29:src/main.cpp  ****     }
  30:src/main.cpp  **** 
  31:src/main.cpp  **** 
  32:src/main.cpp  **** 
  33:src/main.cpp  **** 
  34:src/main.cpp  **** };
  35:src/main.cpp  **** 
  36:src/main.cpp  **** C* createC(uint64 n){
  12              		.loc 1 36 21
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FE 		addi	sp,sp,-32
  16              		.cfi_def_cfa_offset 32
  17 0004 233C1100 		sd	ra,24(sp)
  18 0008 23388100 		sd	s0,16(sp)
  19 000c 23349100 		sd	s1,8(sp)
  20              		.cfi_offset 1, -8
  21              		.cfi_offset 8, -16
  22              		.cfi_offset 9, -24
GAS LISTING /tmp/ccIlsFBP.s 			page 2


  23 0010 13040102 		addi	s0,sp,32
  24              		.cfi_def_cfa 8, 0
  25 0014 93040500 		mv	s1,a0
  37:src/main.cpp  ****     return new C(n);
  26              		.loc 1 37 5
  27              		.loc 1 37 19 is_stmt 0
  28 0018 13058000 		li	a0,8
  29              	.LVL1:
  30 001c 97000000 		call	_Znwm@plt
  30      E7800000 
  31              	.LVL2:
  32              	.LBB24:
  33              	.LBB25:
  28:src/main.cpp  ****     }
  34              		.loc 1 28 9 is_stmt 1
  28:src/main.cpp  ****     }
  35              		.loc 1 28 13 is_stmt 0
  36 0024 23309500 		sd	s1,0(a0)
  37              	.LVL3:
  38              	.LBE25:
  39              	.LBE24:
  38:src/main.cpp  **** }
  40              		.loc 1 38 1
  41 0028 83308101 		ld	ra,24(sp)
  42              		.cfi_restore 1
  43 002c 03340101 		ld	s0,16(sp)
  44              		.cfi_restore 8
  45              		.cfi_def_cfa 2, 32
  46 0030 83348100 		ld	s1,8(sp)
  47              		.cfi_restore 9
  48              	.LVL4:
  49 0034 13010102 		addi	sp,sp,32
  50              		.cfi_def_cfa_offset 0
  51 0038 67800000 		jr	ra
  52              		.cfi_endproc
  53              	.LFE52:
  55              		.align	2
  56              		.globl	main
  58              	main:
  59              	.LFB53:
  39:src/main.cpp  **** 
  40:src/main.cpp  **** extern void userMain();
  41:src/main.cpp  **** 
  42:src/main.cpp  **** int main() {
  60              		.loc 1 42 12 is_stmt 1
  61              		.cfi_startproc
  62              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  63              		.cfi_lsda 0x1b,.LLSDA53
  64 003c 130101FE 		addi	sp,sp,-32
  65              		.cfi_def_cfa_offset 32
  66 0040 233C1100 		sd	ra,24(sp)
  67 0044 23388100 		sd	s0,16(sp)
  68 0048 23349100 		sd	s1,8(sp)
  69 004c 23302101 		sd	s2,0(sp)
  70              		.cfi_offset 1, -8
  71              		.cfi_offset 8, -16
  72              		.cfi_offset 9, -24
GAS LISTING /tmp/ccIlsFBP.s 			page 3


  73              		.cfi_offset 18, -32
  74 0050 13040102 		addi	s0,sp,32
  75              		.cfi_def_cfa 8, 0
  43:src/main.cpp  **** 
  44:src/main.cpp  **** 
  45:src/main.cpp  ****     MemoryAllocator::getInstance().init();
  76              		.loc 1 45 5
  77              	.LBB26:
  78              	.LBB27:
  79              		.file 2 "src/../h/../h/MemoryAllocator.hpp"
   1:src/../h/../h/MemoryAllocator.hpp **** #ifndef PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   2:src/../h/../h/MemoryAllocator.hpp **** #define PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   3:src/../h/../h/MemoryAllocator.hpp **** #include "print.hpp"
   4:src/../h/../h/MemoryAllocator.hpp **** 
   5:src/../h/../h/MemoryAllocator.hpp **** struct Block {
   6:src/../h/../h/MemoryAllocator.hpp ****     size_t size;
   7:src/../h/../h/MemoryAllocator.hpp ****     Block *next;
   8:src/../h/../h/MemoryAllocator.hpp **** };
   9:src/../h/../h/MemoryAllocator.hpp **** 
  10:src/../h/../h/MemoryAllocator.hpp **** class MemoryAllocator {
  11:src/../h/../h/MemoryAllocator.hpp **** 
  12:src/../h/../h/MemoryAllocator.hpp **** private:
  13:src/../h/../h/MemoryAllocator.hpp **** 
  14:src/../h/../h/MemoryAllocator.hpp **** 
  15:src/../h/../h/MemoryAllocator.hpp ****     MemoryAllocator() {}
  16:src/../h/../h/MemoryAllocator.hpp **** 
  17:src/../h/../h/MemoryAllocator.hpp ****     static Block *free_list;
  18:src/../h/../h/MemoryAllocator.hpp ****     static Block *allocated_list;
  19:src/../h/../h/MemoryAllocator.hpp **** 
  20:src/../h/../h/MemoryAllocator.hpp **** 
  21:src/../h/../h/MemoryAllocator.hpp **** public:
  22:src/../h/../h/MemoryAllocator.hpp **** 
  23:src/../h/../h/MemoryAllocator.hpp **** 
  24:src/../h/../h/MemoryAllocator.hpp ****     // Get the singleton instance
  25:src/../h/../h/MemoryAllocator.hpp ****     static MemoryAllocator &getInstance() {
  26:src/../h/../h/MemoryAllocator.hpp ****         static MemoryAllocator instance;
  80              		.loc 2 26 9
  81              		.loc 2 26 32 is_stmt 0
  82 0054 97070000 		lbu	a5,_ZGVZN15MemoryAllocator11getInstanceEvE8instance
  82      83C70700 
  83 005c 63980700 		bnez	a5,.L4
  84              	.LVL5:
  85 0060 93071000 		li	a5,1
  86 0064 17070000 		sb	a5,_ZGVZN15MemoryAllocator11getInstanceEvE8instance,a4
  86      2300F700 
  87              	.LVL6:
  88              	.L4:
  27:src/../h/../h/MemoryAllocator.hpp ****         return instance;
  89              		.loc 2 27 9 is_stmt 1
  90              	.LBE27:
  91              	.LBE26:
  92              	.LBB28:
  93              	.LBB29:
  28:src/../h/../h/MemoryAllocator.hpp ****     }
  29:src/../h/../h/MemoryAllocator.hpp **** 
  30:src/../h/../h/MemoryAllocator.hpp ****     static void init() {
  31:src/../h/../h/MemoryAllocator.hpp ****         // Initialize the free list
GAS LISTING /tmp/ccIlsFBP.s 			page 4


  32:src/../h/../h/MemoryAllocator.hpp **** 
  33:src/../h/../h/MemoryAllocator.hpp ****         // For testing purposes
  34:src/../h/../h/MemoryAllocator.hpp **** //        uint64 start = (uint64)((Block *) HEAP_START_ADDR);
  35:src/../h/../h/MemoryAllocator.hpp **** //        printInteger(start);
  36:src/../h/../h/MemoryAllocator.hpp **** //        printString("\n");
  37:src/../h/../h/MemoryAllocator.hpp **** //        uint64 end = (uint64)((Block *) HEAP_END_ADDR);
  38:src/../h/../h/MemoryAllocator.hpp **** //        printInteger(end);
  39:src/../h/../h/MemoryAllocator.hpp **** //        printString("\n");
  40:src/../h/../h/MemoryAllocator.hpp **** 
  41:src/../h/../h/MemoryAllocator.hpp ****         free_list = (Block *) HEAP_START_ADDR;
  94              		.loc 2 41 9
  95              		.loc 2 41 19 is_stmt 0
  96 006c 97070000 		la	a5,HEAP_START_ADDR
  96      83B70700 
  97 0074 03B70700 		ld	a4,0(a5)
  98 0078 97060000 		la	a3,_ZN15MemoryAllocator9free_listE
  98      83B60600 
  99 0080 23B0E600 		sd	a4,0(a3)
  42:src/../h/../h/MemoryAllocator.hpp ****         free_list->size = (uint64 *) HEAP_END_ADDR - (uint64 *) HEAP_START_ADDR;
 100              		.loc 2 42 9 is_stmt 1
 101              		.loc 2 42 27 is_stmt 0
 102 0084 97070000 		la	a5,HEAP_END_ADDR
 102      83B70700 
 103 008c 83B70700 		ld	a5,0(a5)
 104              		.loc 2 42 52
 105 0090 B387E740 		sub	a5,a5,a4
 106 0094 93D73740 		srai	a5,a5,3
 107              		.loc 2 42 25
 108 0098 2330F700 		sd	a5,0(a4)
  43:src/../h/../h/MemoryAllocator.hpp ****         free_list->next = nullptr;
 109              		.loc 2 43 9 is_stmt 1
 110              		.loc 2 43 20 is_stmt 0
 111 009c 83B70600 		ld	a5,0(a3)
 112              		.loc 2 43 25
 113 00a0 23B40700 		sd	zero,8(a5)
  44:src/../h/../h/MemoryAllocator.hpp ****         allocated_list = nullptr;
 114              		.loc 2 44 9 is_stmt 1
 115              		.loc 2 44 24 is_stmt 0
 116 00a4 97070000 		la	a5,_ZN15MemoryAllocator14allocated_listE
 116      83B70700 
 117 00ac 23B00700 		sd	zero,0(a5)
 118              	.LBE29:
 119              	.LBE28:
  46:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap+1);
 120              		.loc 1 46 5 is_stmt 1
 121              		.loc 1 46 19 is_stmt 0
 122 00b0 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
 122      83B70700 
 123 00b8 93871700 		addi	a5,a5,1
 124              	.LVL7:
 125              	.LBB30:
 126              	.LBB31:
 127              		.file 3 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   2:src/../h/riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   3:src/../h/riscv.hpp **** 
   4:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccIlsFBP.s 			page 5


   5:src/../h/riscv.hpp **** #include "../h/MemoryAllocator.hpp"
   6:src/../h/riscv.hpp **** #include "PCB.hpp"
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** 
   9:src/../h/riscv.hpp **** #define readUsrReg(reg, dst) __asm__ volatile("mv %0,"#reg : "=r" (dst));
  10:src/../h/riscv.hpp **** #define writeUsrReg(reg, src) __asm__ volatile("mv "#reg", %0" : : "r" (src));
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp **** class Riscv
  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp **** 
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  20:src/../h/riscv.hpp ****     static void popSppSpie();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  23:src/../h/riscv.hpp ****     static void pushRegisters();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  26:src/../h/riscv.hpp ****     static void popRegisters();
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // read register scause
  29:src/../h/riscv.hpp ****     static uint64 r_scause();
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // write register scause
  32:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // read register sepc
  35:src/../h/riscv.hpp ****     static uint64 r_sepc();
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // write register sepc
  38:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // read register stvec
  41:src/../h/riscv.hpp ****     static uint64 r_stvec();
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // write register stvec
  44:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     // read register stval
  47:src/../h/riscv.hpp ****     static uint64 r_stval();
  48:src/../h/riscv.hpp **** 
  49:src/../h/riscv.hpp ****     // write register stval
  50:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  51:src/../h/riscv.hpp **** 
  52:src/../h/riscv.hpp ****     enum BitMaskSip
  53:src/../h/riscv.hpp ****     {
  54:src/../h/riscv.hpp **** //        SIP_SSIE = (1 << 1),
  55:src/../h/riscv.hpp **** //        SIP_STIE = (1 << 5),
  56:src/../h/riscv.hpp **** //        SIP_SEIE = (1 << 9),
  57:src/../h/riscv.hpp ****         SIP_SSIP = (1<<1),
  58:src/../h/riscv.hpp ****         SIP_SEIP = (1<<9)
  59:src/../h/riscv.hpp ****     };
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // mask set register sip
GAS LISTING /tmp/ccIlsFBP.s 			page 6


  62:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // mask clear register sip
  65:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // read register sip
  68:src/../h/riscv.hpp ****     static uint64 r_sip();
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // write register sip
  71:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     enum BitMaskSstatus
  74:src/../h/riscv.hpp ****     {
  75:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  76:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  77:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  78:src/../h/riscv.hpp ****     };
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // mask set register sstatus
  81:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // mask clear register sstatus
  84:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     // read register sstatus
  87:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp ****     // write register sstatus
  90:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp ****     // mask set register sie
  93:src/../h/riscv.hpp ****     static void ms_sie(uint64 mask);
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp ****     // mask clear register sie
  96:src/../h/riscv.hpp ****     static void mc_sie(uint64 mask);
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp ****     static void supervisorTrap();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     static long r_a0();
 101:src/../h/riscv.hpp **** 
 102:src/../h/riscv.hpp ****     static void w_a0(long a0);
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp ****     static uint64 r_a1();
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp ****     static void w_a1(uint64 a1);
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp ****     static uint64 r_a2();
 109:src/../h/riscv.hpp **** 
 110:src/../h/riscv.hpp ****     static void w_a2(uint64 a1);
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp ****     static uint64 r_a3();
 113:src/../h/riscv.hpp **** 
 114:src/../h/riscv.hpp ****     static void w_a3(uint64 a1);
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp ****     static void push_a0(long a0);
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** private:
GAS LISTING /tmp/ccIlsFBP.s 			page 7


 119:src/../h/riscv.hpp ****     static void trapHandler();
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp **** 
 122:src/../h/riscv.hpp **** };
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 125:src/../h/riscv.hpp **** {
 126:src/../h/riscv.hpp ****     uint64 volatile scause;
 127:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 128:src/../h/riscv.hpp ****     return scause;
 129:src/../h/riscv.hpp **** }
 130:src/../h/riscv.hpp **** 
 131:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 132:src/../h/riscv.hpp **** {
 133:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 137:src/../h/riscv.hpp **** {
 138:src/../h/riscv.hpp ****     uint64 volatile sepc;
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 140:src/../h/riscv.hpp ****     return sepc;
 141:src/../h/riscv.hpp **** }
 142:src/../h/riscv.hpp **** 
 143:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 144:src/../h/riscv.hpp **** {
 145:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 146:src/../h/riscv.hpp **** }
 147:src/../h/riscv.hpp **** 
 148:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 149:src/../h/riscv.hpp **** {
 150:src/../h/riscv.hpp ****     uint64 volatile stvec;
 151:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 152:src/../h/riscv.hpp ****     return stvec;
 153:src/../h/riscv.hpp **** }
 154:src/../h/riscv.hpp **** 
 155:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 156:src/../h/riscv.hpp **** {
 157:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 128              		.loc 3 157 5 is_stmt 1
 129              		.loc 3 157 69 is_stmt 0
 130              	#APP
 131              	# 157 "src/../h/riscv.hpp" 1
 158              	}
 132              		csrw stvec, a5
 133              	# 0 "" 2
 134              	.LVL8:
 135              	#NO_APP
 136              	.LBE31:
 137              	.LBE30:
  47:src/main.cpp  ****     PCB* pcb = new PCB(nullptr, nullptr, nullptr);
 138              		.loc 1 47 5 is_stmt 1
 139              		.loc 1 47 49 is_stmt 0
 140 00c0 13050003 		li	a0,48
 141              	.LEHB0:
 142 00c4 97000000 		call	_Znwm@plt
 142      E7800000 
GAS LISTING /tmp/ccIlsFBP.s 			page 8


 143              	.LVL9:
 144 00cc 93040500 		mv	s1,a0
 145              	.LVL10:
 146              	.LBB32:
 147              	.LBB33:
 148              		.file 4 "src/../h/PCB.hpp"
   1:src/../h/PCB.hpp **** #ifndef PROJECT_BASE_V1_1_PCB_HPP
   2:src/../h/PCB.hpp **** #define PROJECT_BASE_V1_1_PCB_HPP
   3:src/../h/PCB.hpp **** 
   4:src/../h/PCB.hpp **** 
   5:src/../h/PCB.hpp **** #include "Scheduler.hpp"
   6:src/../h/PCB.hpp **** #include "riscv.hpp"
   7:src/../h/PCB.hpp **** #include "../h/syscall_c.hpp"
   8:src/../h/PCB.hpp **** 
   9:src/../h/PCB.hpp **** 
  10:src/../h/PCB.hpp **** class PCB {
  11:src/../h/PCB.hpp **** public:
  12:src/../h/PCB.hpp ****     struct Context {
  13:src/../h/PCB.hpp ****         uint64 ra;
  14:src/../h/PCB.hpp ****         uint64 sp;
  15:src/../h/PCB.hpp ****     };
  16:src/../h/PCB.hpp **** 
  17:src/../h/PCB.hpp ****     enum State {
  18:src/../h/PCB.hpp ****         READY,
  19:src/../h/PCB.hpp ****         RUNNING,
  20:src/../h/PCB.hpp ****         SUSPENDED,
  21:src/../h/PCB.hpp ****         FINISHED
  22:src/../h/PCB.hpp ****     };
  23:src/../h/PCB.hpp **** 
  24:src/../h/PCB.hpp ****     ~PCB() { delete[] stack; }
  25:src/../h/PCB.hpp **** 
  26:src/../h/PCB.hpp ****     bool isFinished() const { return state == FINISHED; }
  27:src/../h/PCB.hpp **** 
  28:src/../h/PCB.hpp ****     void setState(State s) { state = s; }
  29:src/../h/PCB.hpp **** 
  30:src/../h/PCB.hpp ****     using Body = void (*)(void *);
  31:src/../h/PCB.hpp **** 
  32:src/../h/PCB.hpp **** 
  33:src/../h/PCB.hpp ****     static void dispatch();
  34:src/../h/PCB.hpp **** 
  35:src/../h/PCB.hpp ****     static int exit();
  36:src/../h/PCB.hpp **** 
  37:src/../h/PCB.hpp **** 
  38:src/../h/PCB.hpp ****     static PCB *running;
  39:src/../h/PCB.hpp **** 
  40:src/../h/PCB.hpp **** private:
  41:src/../h/PCB.hpp **** 
  42:src/../h/PCB.hpp ****     static void contextSwitch(Context *old, Context *running);
  43:src/../h/PCB.hpp **** 
  44:src/../h/PCB.hpp ****     static void wrapper();
  45:src/../h/PCB.hpp **** 
  46:src/../h/PCB.hpp **** public:
  47:src/../h/PCB.hpp ****     PCB(Body body, void *args, uint64 *stack) {
  48:src/../h/PCB.hpp ****         this->body = body;
 149              		.loc 4 48 9 is_stmt 1
 150              		.loc 4 48 20 is_stmt 0
 151 00d0 23300500 		sd	zero,0(a0)
GAS LISTING /tmp/ccIlsFBP.s 			page 9


  49:src/../h/PCB.hpp ****         this->stack = stack;
 152              		.loc 4 49 9 is_stmt 1
 153              		.loc 4 49 21 is_stmt 0
 154 00d4 23340500 		sd	zero,8(a0)
  50:src/../h/PCB.hpp ****         context = {(uint64) &wrapper,
 155              		.loc 4 50 9 is_stmt 1
 156              		.loc 4 50 17 is_stmt 0
 157 00d8 97070000 		la	a5,_ZN3PCB7wrapperEv
 157      83B70700 
 158 00e0 233CF500 		sd	a5,24(a0)
 159 00e4 23300502 		sd	zero,32(a0)
  51:src/../h/PCB.hpp ****                    stack != nullptr ? (uint64) &stack[DEFAULT_STACK_SIZE] : 0
  52:src/../h/PCB.hpp ****         };
  53:src/../h/PCB.hpp ****         this->args = args;
 160              		.loc 4 53 9 is_stmt 1
 161              		.loc 4 53 20 is_stmt 0
 162 00e8 23380500 		sd	zero,16(a0)
  54:src/../h/PCB.hpp ****         state = READY;
 163              		.loc 4 54 9 is_stmt 1
 164              	.LVL11:
 165              	.LBE33:
 166              	.LBE32:
  48:src/main.cpp  ****     PCB::running=pcb;
 167              		.loc 1 48 5
 168              		.loc 1 48 17 is_stmt 0
 169 00ec 97070000 		la	a5,_ZN3PCB7runningE
 169      83B70700 
 170 00f4 23B0A700 		sd	a0,0(a5)
  49:src/main.cpp  ****     pcb->setState(PCB::RUNNING);
 171              		.loc 1 49 5 is_stmt 1
 172              	.LVL12:
 173              	.LBB34:
 174              	.LBB35:
  28:src/../h/PCB.hpp **** 
 175              		.loc 4 28 30
  28:src/../h/PCB.hpp **** 
 176              		.loc 4 28 36 is_stmt 0
 177 00f8 93071000 		li	a5,1
 178 00fc 2324F502 		sw	a5,40(a0)
 179              	.LVL13:
 180              	.LBE35:
 181              	.LBE34:
  50:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
 182              		.loc 1 50 5 is_stmt 1
 183              	.LBB36:
 184              	.LBB37:
 159:src/../h/riscv.hpp **** 
 160:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 161:src/../h/riscv.hpp **** {
 162:src/../h/riscv.hpp ****     uint64 volatile stval;
 163:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 164:src/../h/riscv.hpp ****     return stval;
 165:src/../h/riscv.hpp **** }
 166:src/../h/riscv.hpp **** 
 167:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 168:src/../h/riscv.hpp **** {
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
GAS LISTING /tmp/ccIlsFBP.s 			page 10


 170:src/../h/riscv.hpp **** }
 171:src/../h/riscv.hpp **** 
 172:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 173:src/../h/riscv.hpp **** {
 174:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 175:src/../h/riscv.hpp **** }
 176:src/../h/riscv.hpp **** 
 177:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 178:src/../h/riscv.hpp **** {
 179:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 180:src/../h/riscv.hpp **** }
 181:src/../h/riscv.hpp **** 
 182:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 183:src/../h/riscv.hpp **** {
 184:src/../h/riscv.hpp ****     uint64 volatile sip;
 185:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 186:src/../h/riscv.hpp ****     return sip;
 187:src/../h/riscv.hpp **** }
 188:src/../h/riscv.hpp **** 
 189:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 190:src/../h/riscv.hpp **** {
 191:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 192:src/../h/riscv.hpp **** }
 193:src/../h/riscv.hpp **** 
 194:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 195:src/../h/riscv.hpp **** {
 196:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 185              		.loc 3 196 5
 186              		.loc 3 196 68 is_stmt 0
 187 0100 93072000 		li	a5,2
 188              	#APP
 189              	# 196 "src/../h/riscv.hpp" 1
 197              	}
 190              		csrs sstatus, a5
 191              	# 0 "" 2
 192              	.LVL14:
 193              	#NO_APP
 194              	.LBE37:
 195              	.LBE36:
  51:src/main.cpp  **** 
  52:src/main.cpp  ****     switchToUserMode();
 196              		.loc 1 52 5 is_stmt 1
 197              		.loc 1 52 21 is_stmt 0
 198 0108 97000000 		call	_Z16switchToUserModev@plt
 198      E7800000 
 199              	.LVL15:
  53:src/main.cpp  **** 
  54:src/main.cpp  ****     Thread* userThread = new Thread((void (*)(void *))(userMain), nullptr);
 200              		.loc 1 54 5 is_stmt 1
 201              		.loc 1 54 74 is_stmt 0
 202 0110 13050002 		li	a0,32
 203 0114 97000000 		call	_Znwm@plt
 203      E7800000 
 204              	.LVL16:
 205              	.LEHE0:
 206 011c 13090500 		mv	s2,a0
 207 0120 13060000 		li	a2,0
GAS LISTING /tmp/ccIlsFBP.s 			page 11


 208 0124 97050000 		la	a1,_Z8userMainv
 208      83B50500 
 209              	.LEHB1:
 210 012c 97000000 		call	_ZN6ThreadC1EPFvPvES0_@plt
 210      E7800000 
 211              	.LVL17:
 212              	.LEHE1:
  55:src/main.cpp  ****     userThread->start();
 213              		.loc 1 55 5 is_stmt 1 discriminator 2
 214              		.loc 1 55 22 is_stmt 0 discriminator 2
 215 0134 13050900 		mv	a0,s2
 216              	.LEHB2:
 217 0138 97000000 		call	_ZN6Thread5startEv@plt
 217      E7800000 
 218              	.LVL18:
  56:src/main.cpp  **** 
  57:src/main.cpp  ****     thread_dispatch();
 219              		.loc 1 57 5 is_stmt 1 discriminator 2
 220              		.loc 1 57 20 is_stmt 0 discriminator 2
 221 0140 97000000 		call	_Z15thread_dispatchv@plt
 221      E7800000 
 222              	.LVL19:
  58:src/main.cpp  **** 
  59:src/main.cpp  ****     delete userThread;
 223              		.loc 1 59 5 is_stmt 1 discriminator 2
 224              		.loc 1 59 22 is_stmt 0 discriminator 2
 225 0148 630A0900 		beqz	s2,.L5
 226              		.loc 1 59 12 discriminator 1
 227 014c 83370900 		ld	a5,0(s2)
 228 0150 83B78700 		ld	a5,8(a5)
 229 0154 13050900 		mv	a0,s2
 230 0158 E7800700 		jalr	a5
 231              	.LVL20:
 232              	.L5:
  60:src/main.cpp  ****     delete pcb;
 233              		.loc 1 60 5 is_stmt 1
 234              		.loc 1 60 15 is_stmt 0
 235 015c 63800402 		beqz	s1,.L10
 236              	.LVL21:
 237              	.LBB38:
 238              	.LBB39:
  24:src/../h/PCB.hpp **** 
 239              		.loc 4 24 14 is_stmt 1
  24:src/../h/PCB.hpp **** 
 240              		.loc 4 24 23 is_stmt 0
 241 0160 03B58400 		ld	a0,8(s1)
  24:src/../h/PCB.hpp **** 
 242              		.loc 4 24 28
 243 0164 63060500 		beqz	a0,.L7
  24:src/../h/PCB.hpp **** 
 244              		.loc 4 24 23
 245 0168 97000000 		call	_ZdaPv@plt
 245      E7800000 
 246              	.LVL22:
 247              	.L7:
 248              	.LBE39:
 249              	.LBE38:
GAS LISTING /tmp/ccIlsFBP.s 			page 12


 250              		.loc 1 60 12
 251 0170 13850400 		mv	a0,s1
 252 0174 97000000 		call	_ZdlPv@plt
 252      E7800000 
 253              	.LVL23:
 254              	.LEHE2:
  61:src/main.cpp  **** 
  62:src/main.cpp  ****     //printString("MAIN START\n");
  63:src/main.cpp  **** 
  64:src/main.cpp  **** 
  65:src/main.cpp  **** 
  66:src/main.cpp  **** 
  67:src/main.cpp  ****     //printString("Finished\n");
  68:src/main.cpp  **** 
  69:src/main.cpp  ****     return 0;
 255              		.loc 1 69 5 is_stmt 1
 256              	.L10:
  70:src/main.cpp  **** }...
 257              		.loc 1 70 1 is_stmt 0
 258 017c 13050000 		li	a0,0
 259 0180 83308101 		ld	ra,24(sp)
 260              		.cfi_remember_state
 261              		.cfi_restore 1
 262 0184 03340101 		ld	s0,16(sp)
 263              		.cfi_restore 8
 264              		.cfi_def_cfa 2, 32
 265 0188 83348100 		ld	s1,8(sp)
 266              		.cfi_restore 9
 267              	.LVL24:
 268 018c 03390100 		ld	s2,0(sp)
 269              		.cfi_restore 18
 270              	.LVL25:
 271 0190 13010102 		addi	sp,sp,32
 272              		.cfi_def_cfa_offset 0
 273 0194 67800000 		jr	ra
 274              	.LVL26:
 275              	.L9:
 276              		.cfi_restore_state
 277 0198 93040500 		mv	s1,a0
 278              	.LVL27:
  54:src/main.cpp  ****     Thread* userThread = new Thread((void (*)(void *))(userMain), nullptr);
 279              		.loc 1 54 74
 280 019c 13050900 		mv	a0,s2
 281 01a0 97000000 		call	_ZdlPv@plt
 281      E7800000 
 282              	.LVL28:
 283 01a8 13850400 		mv	a0,s1
 284              	.LEHB3:
 285 01ac 97000000 		call	_Unwind_Resume@plt
 285      E7800000 
 286              	.LVL29:
 287              	.LEHE3:
 288              		.cfi_endproc
 289              	.LFE53:
 290              		.globl	__gxx_personality_v0
 291              		.section	.gcc_except_table,"a",@progbits
 292              	.LLSDA53:
GAS LISTING /tmp/ccIlsFBP.s 			page 13


 293 0000 FF       		.byte	0xff
 294 0001 FF       		.byte	0xff
 295 0002 03       		.byte	0x3
 296 0003 34       		.byte	0x34
 297 0004 00000000 		.4byte	.LEHB0-.LFB53
 298 0008 00000000 		.4byte	.LEHE0-.LEHB0
 299 000c 00000000 		.4byte	0
 300 0010 00       		.byte	0
 301 0011 00000000 		.4byte	.LEHB1-.LFB53
 302 0015 00000000 		.4byte	.LEHE1-.LEHB1
 303 0019 00000000 		.4byte	.L9-.LFB53
 304 001d 00       		.byte	0
 305 001e 00000000 		.4byte	.LEHB2-.LFB53
 306 0022 00000000 		.4byte	.LEHE2-.LEHB2
 307 0026 00000000 		.4byte	0
 308 002a 00       		.byte	0
 309 002b 00000000 		.4byte	.LEHB3-.LFB53
 310 002f 00000000 		.4byte	.LEHE3-.LEHB3
 311 0033 00000000 		.4byte	0
 312 0037 00       		.byte	0
 313              		.text
 315              		.weak	_ZGVZN15MemoryAllocator11getInstanceEvE8instance
 316              		.section	.bss._ZGVZN15MemoryAllocator11getInstanceEvE8instance,"awG",@nobits,_ZGVZN15MemoryAllocat
 317              		.align	3
 320              	_ZGVZN15MemoryAllocator11getInstanceEvE8instance:
 321 0000 00000000 		.zero	8
 321      00000000 
 322              		.text
 323              	.Letext0:
 324              		.file 5 "src/../h/../h/../lib/hw.h"
 325              		.file 6 "src/../h/syscall_cpp.hpp"
 326              		.file 7 "src/../h/../h/syscall_c.hpp"
 3213              		.align	3
 3216              	DW.ref.__gxx_personality_v0:
 3217 0000 00000000 		.dword	__gxx_personality_v0
 3217      00000000 
 3218              		.ident	"GCC: (Ubuntu 9.4.0-1ubuntu1~20.04) 9.4.0"
 3219              		.section	.note.GNU-stack,"",@progbits
GAS LISTING /tmp/ccIlsFBP.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccIlsFBP.s:9      .text:0000000000000000 _Z7createCm
     /tmp/ccIlsFBP.s:13     .text:0000000000000000 .L0 
     /tmp/ccIlsFBP.s:15     .text:0000000000000000 .L0 
     /tmp/ccIlsFBP.s:16     .text:0000000000000004 .L0 
     /tmp/ccIlsFBP.s:20     .text:0000000000000010 .L0 
     /tmp/ccIlsFBP.s:21     .text:0000000000000010 .L0 
     /tmp/ccIlsFBP.s:22     .text:0000000000000010 .L0 
     /tmp/ccIlsFBP.s:24     .text:0000000000000014 .L0 
     /tmp/ccIlsFBP.s:27     .text:0000000000000018 .L0 
     /tmp/ccIlsFBP.s:28     .text:0000000000000018 .L0 
     /tmp/ccIlsFBP.s:35     .text:0000000000000024 .L0 
     /tmp/ccIlsFBP.s:36     .text:0000000000000024 .L0 
     /tmp/ccIlsFBP.s:41     .text:0000000000000028 .L0 
     /tmp/ccIlsFBP.s:42     .text:000000000000002c .L0 
     /tmp/ccIlsFBP.s:44     .text:0000000000000030 .L0 
     /tmp/ccIlsFBP.s:45     .text:0000000000000030 .L0 
     /tmp/ccIlsFBP.s:47     .text:0000000000000034 .L0 
     /tmp/ccIlsFBP.s:50     .text:0000000000000038 .L0 
     /tmp/ccIlsFBP.s:52     .text:000000000000003c .L0 
     /tmp/ccIlsFBP.s:58     .text:000000000000003c main
     /tmp/ccIlsFBP.s:61     .text:000000000000003c .L0 
     /tmp/ccIlsFBP.s:3216   .data.rel.local.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccIlsFBP.s:64     .text:000000000000003c .L0 
     /tmp/ccIlsFBP.s:65     .text:0000000000000040 .L0 
     /tmp/ccIlsFBP.s:70     .text:0000000000000050 .L0 
     /tmp/ccIlsFBP.s:71     .text:0000000000000050 .L0 
     /tmp/ccIlsFBP.s:72     .text:0000000000000050 .L0 
     /tmp/ccIlsFBP.s:73     .text:0000000000000050 .L0 
     /tmp/ccIlsFBP.s:75     .text:0000000000000054 .L0 
     /tmp/ccIlsFBP.s:80     .text:0000000000000054 .L0 
     /tmp/ccIlsFBP.s:81     .text:0000000000000054 .L0 
     /tmp/ccIlsFBP.s:320    .bss._ZGVZN15MemoryAllocator11getInstanceEvE8instance:0000000000000000 _ZGVZN15MemoryAllocator11getInstanceEvE8instance
     /tmp/ccIlsFBP.s:82     .text:0000000000000054 .L0 
     /tmp/ccIlsFBP.s:94     .text:000000000000006c .L0 
     /tmp/ccIlsFBP.s:95     .text:000000000000006c .L0 
     /tmp/ccIlsFBP.s:96     .text:000000000000006c .L0 
     /tmp/ccIlsFBP.s:101    .text:0000000000000084 .L0 
     /tmp/ccIlsFBP.s:102    .text:0000000000000084 .L0 
     /tmp/ccIlsFBP.s:105    .text:0000000000000090 .L0 
     /tmp/ccIlsFBP.s:108    .text:0000000000000098 .L0 
     /tmp/ccIlsFBP.s:110    .text:000000000000009c .L0 
     /tmp/ccIlsFBP.s:111    .text:000000000000009c .L0 
     /tmp/ccIlsFBP.s:113    .text:00000000000000a0 .L0 
     /tmp/ccIlsFBP.s:115    .text:00000000000000a4 .L0 
     /tmp/ccIlsFBP.s:116    .text:00000000000000a4 .L0 
     /tmp/ccIlsFBP.s:121    .text:00000000000000b0 .L0 
     /tmp/ccIlsFBP.s:122    .text:00000000000000b0 .L0 
     /tmp/ccIlsFBP.s:129    .text:00000000000000bc .L0 
  src/../h/riscv.hpp:157    .text:00000000000000bc .L0 
     /tmp/ccIlsFBP.s:139    .text:00000000000000c0 .L0 
     /tmp/ccIlsFBP.s:140    .text:00000000000000c0 .L0 
     /tmp/ccIlsFBP.s:150    .text:00000000000000d0 .L0 
     /tmp/ccIlsFBP.s:151    .text:00000000000000d0 .L0 
     /tmp/ccIlsFBP.s:153    .text:00000000000000d4 .L0 
     /tmp/ccIlsFBP.s:154    .text:00000000000000d4 .L0 
GAS LISTING /tmp/ccIlsFBP.s 			page 15


     /tmp/ccIlsFBP.s:156    .text:00000000000000d8 .L0 
     /tmp/ccIlsFBP.s:157    .text:00000000000000d8 .L0 
     /tmp/ccIlsFBP.s:161    .text:00000000000000e8 .L0 
     /tmp/ccIlsFBP.s:162    .text:00000000000000e8 .L0 
     /tmp/ccIlsFBP.s:167    .text:00000000000000ec .L0 
     /tmp/ccIlsFBP.s:168    .text:00000000000000ec .L0 
     /tmp/ccIlsFBP.s:169    .text:00000000000000ec .L0 
     /tmp/ccIlsFBP.s:175    .text:00000000000000f8 .L0 
     /tmp/ccIlsFBP.s:176    .text:00000000000000f8 .L0 
     /tmp/ccIlsFBP.s:177    .text:00000000000000f8 .L0 
     /tmp/ccIlsFBP.s:185    .text:0000000000000100 .L0 
     /tmp/ccIlsFBP.s:186    .text:0000000000000100 .L0 
     /tmp/ccIlsFBP.s:187    .text:0000000000000100 .L0 
     /tmp/ccIlsFBP.s:197    .text:0000000000000108 .L0 
     /tmp/ccIlsFBP.s:198    .text:0000000000000108 .L0 
     /tmp/ccIlsFBP.s:201    .text:0000000000000110 .L0 
     /tmp/ccIlsFBP.s:202    .text:0000000000000110 .L0 
     /tmp/ccIlsFBP.s:214    .text:0000000000000134 .L0 
     /tmp/ccIlsFBP.s:215    .text:0000000000000134 .L0 
     /tmp/ccIlsFBP.s:220    .text:0000000000000140 .L0 
     /tmp/ccIlsFBP.s:221    .text:0000000000000140 .L0 
     /tmp/ccIlsFBP.s:224    .text:0000000000000148 .L0 
     /tmp/ccIlsFBP.s:225    .text:0000000000000148 .L0 
     /tmp/ccIlsFBP.s:227    .text:000000000000014c .L0 
     /tmp/ccIlsFBP.s:234    .text:000000000000015c .L0 
     /tmp/ccIlsFBP.s:235    .text:000000000000015c .L0 
     /tmp/ccIlsFBP.s:240    .text:0000000000000160 .L0 
     /tmp/ccIlsFBP.s:241    .text:0000000000000160 .L0 
     /tmp/ccIlsFBP.s:243    .text:0000000000000164 .L0 
     /tmp/ccIlsFBP.s:245    .text:0000000000000168 .L0 
     /tmp/ccIlsFBP.s:251    .text:0000000000000170 .L0 
     /tmp/ccIlsFBP.s:257    .text:000000000000017c .L0 
     /tmp/ccIlsFBP.s:258    .text:000000000000017c .L0 
     /tmp/ccIlsFBP.s:260    .text:0000000000000184 .L0 
     /tmp/ccIlsFBP.s:261    .text:0000000000000184 .L0 
     /tmp/ccIlsFBP.s:263    .text:0000000000000188 .L0 
     /tmp/ccIlsFBP.s:264    .text:0000000000000188 .L0 
     /tmp/ccIlsFBP.s:266    .text:000000000000018c .L0 
     /tmp/ccIlsFBP.s:269    .text:0000000000000190 .L0 
     /tmp/ccIlsFBP.s:272    .text:0000000000000194 .L0 
     /tmp/ccIlsFBP.s:276    .text:0000000000000198 .L0 
     /tmp/ccIlsFBP.s:280    .text:000000000000019c .L0 
     /tmp/ccIlsFBP.s:288    .text:00000000000001b4 .L0 
     /tmp/ccIlsFBP.s:327    .text:00000000000001b4 .L0 
     /tmp/ccIlsFBP.s:82     .text:0000000000000054 .L0 
     /tmp/ccIlsFBP.s:86     .text:0000000000000064 .L0 
     /tmp/ccIlsFBP.s:96     .text:000000000000006c .L0 
     /tmp/ccIlsFBP.s:98     .text:0000000000000078 .L0 
     /tmp/ccIlsFBP.s:102    .text:0000000000000084 .L0 
     /tmp/ccIlsFBP.s:116    .text:00000000000000a4 .L0 
     /tmp/ccIlsFBP.s:122    .text:00000000000000b0 .L0 
     /tmp/ccIlsFBP.s:157    .text:00000000000000d8 .L0 
     /tmp/ccIlsFBP.s:169    .text:00000000000000ec .L0 
     /tmp/ccIlsFBP.s:208    .text:0000000000000124 .L0 
     /tmp/ccIlsFBP.s:88     .text:000000000000006c .L4
     /tmp/ccIlsFBP.s:232    .text:000000000000015c .L5
     /tmp/ccIlsFBP.s:256    .text:000000000000017c .L10
GAS LISTING /tmp/ccIlsFBP.s 			page 16


     /tmp/ccIlsFBP.s:247    .text:0000000000000170 .L7
     /tmp/ccIlsFBP.s:141    .text:00000000000000c4 .LEHB0
     /tmp/ccIlsFBP.s:59     .text:000000000000003c .LFB53
     /tmp/ccIlsFBP.s:205    .text:000000000000011c .LEHE0
     /tmp/ccIlsFBP.s:209    .text:000000000000012c .LEHB1
     /tmp/ccIlsFBP.s:212    .text:0000000000000134 .LEHE1
     /tmp/ccIlsFBP.s:275    .text:0000000000000198 .L9
     /tmp/ccIlsFBP.s:216    .text:0000000000000138 .LEHB2
     /tmp/ccIlsFBP.s:254    .text:000000000000017c .LEHE2
     /tmp/ccIlsFBP.s:284    .text:00000000000001ac .LEHB3
     /tmp/ccIlsFBP.s:287    .text:00000000000001b4 .LEHE3
     /tmp/ccIlsFBP.s:1663   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccIlsFBP.s:3138   .debug_str:000000000000076f .LASF152
     /tmp/ccIlsFBP.s:2958   .debug_str:0000000000000298 .LASF153
     /tmp/ccIlsFBP.s:3144   .debug_str:0000000000000857 .LASF154
     /tmp/ccIlsFBP.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccIlsFBP.s:323    .text:00000000000001b4 .Letext0
     /tmp/ccIlsFBP.s:2870   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccIlsFBP.s:2982   .debug_str:0000000000000341 .LASF0
     /tmp/ccIlsFBP.s:3014   .debug_str:0000000000000421 .LASF1
     /tmp/ccIlsFBP.s:3082   .debug_str:0000000000000610 .LASF2
     /tmp/ccIlsFBP.s:3092   .debug_str:0000000000000658 .LASF4
     /tmp/ccIlsFBP.s:2992   .debug_str:0000000000000391 .LASF3
     /tmp/ccIlsFBP.s:2880   .debug_str:0000000000000032 .LASF5
     /tmp/ccIlsFBP.s:3060   .debug_str:000000000000056b .LASF6
     /tmp/ccIlsFBP.s:3008   .debug_str:00000000000003f6 .LASF7
     /tmp/ccIlsFBP.s:2966   .debug_str:00000000000002b6 .LASF8
     /tmp/ccIlsFBP.s:2970   .debug_str:00000000000002e6 .LASF9
     /tmp/ccIlsFBP.s:2908   .debug_str:0000000000000127 .LASF10
     /tmp/ccIlsFBP.s:2956   .debug_str:0000000000000289 .LASF11
     /tmp/ccIlsFBP.s:2918   .debug_str:0000000000000161 .LASF12
     /tmp/ccIlsFBP.s:2906   .debug_str:0000000000000117 .LASF13
     /tmp/ccIlsFBP.s:3122   .debug_str:000000000000071e .LASF14
     /tmp/ccIlsFBP.s:2942   .debug_str:000000000000021a .LASF15
     /tmp/ccIlsFBP.s:3114   .debug_str:00000000000006e1 .LASF16
     /tmp/ccIlsFBP.s:3000   .debug_str:00000000000003d5 .LASF155
     /tmp/ccIlsFBP.s:3012   .debug_str:000000000000041c .LASF17
     /tmp/ccIlsFBP.s:2910   .debug_str:0000000000000136 .LASF18
     /tmp/ccIlsFBP.s:3056   .debug_str:000000000000054a .LASF27
     /tmp/ccIlsFBP.s:2890   .debug_str:0000000000000088 .LASF53
     /tmp/ccIlsFBP.s:3154   .debug_str:00000000000008af .LASF19
     /tmp/ccIlsFBP.s:3116   .debug_str:00000000000006f7 .LASF20
     /tmp/ccIlsFBP.s:3190   .debug_str:0000000000000979 .LASF43
     /tmp/ccIlsFBP.s:3030   .debug_str:0000000000000494 .LASF45
     /tmp/ccIlsFBP.s:2896   .debug_str:00000000000000df .LASF39
     /tmp/ccIlsFBP.s:3202   .debug_str:00000000000009cd .LASF41
     /tmp/ccIlsFBP.s:3208   .debug_str:00000000000009fe .LASF21
     /tmp/ccIlsFBP.s:2968   .debug_str:00000000000002c6 .LASF23
     /tmp/ccIlsFBP.s:3026   .debug_str:0000000000000473 .LASF22
     /tmp/ccIlsFBP.s:3052   .debug_str:000000000000051e .LASF24
     /tmp/ccIlsFBP.s:2996   .debug_str:00000000000003b4 .LASF35
     /tmp/ccIlsFBP.s:3084   .debug_str:000000000000061e .LASF25
     /tmp/ccIlsFBP.s:3158   .debug_str:00000000000008be .LASF26
     /tmp/ccIlsFBP.s:3126   .debug_str:000000000000073c .LASF156
     /tmp/ccIlsFBP.s:3132   .debug_str:0000000000000754 .LASF57
     /tmp/ccIlsFBP.s:2902   .debug_str:00000000000000fe .LASF28
     /tmp/ccIlsFBP.s:3104   .debug_str:00000000000006ae .LASF29
GAS LISTING /tmp/ccIlsFBP.s 			page 17


     /tmp/ccIlsFBP.s:2914   .debug_str:000000000000014e .LASF30
     /tmp/ccIlsFBP.s:2898   .debug_str:00000000000000e4 .LASF31
     /tmp/ccIlsFBP.s:3176   .debug_str:000000000000092c .LASF32
     /tmp/ccIlsFBP.s:3200   .debug_str:00000000000009c1 .LASF33
     /tmp/ccIlsFBP.s:3128   .debug_str:0000000000000744 .LASF34
     /tmp/ccIlsFBP.s:3182   .debug_str:000000000000093b .LASF36
     /tmp/ccIlsFBP.s:3090   .debug_str:000000000000064f .LASF37
     /tmp/ccIlsFBP.s:2990   .debug_str:0000000000000375 .LASF38
     /tmp/ccIlsFBP.s:2934   .debug_str:00000000000001fc .LASF40
     /tmp/ccIlsFBP.s:2888   .debug_str:0000000000000075 .LASF42
     /tmp/ccIlsFBP.s:3108   .debug_str:00000000000006bc .LASF44
     /tmp/ccIlsFBP.s:3088   .debug_str:0000000000000640 .LASF46
     /tmp/ccIlsFBP.s:3134   .debug_str:000000000000075a .LASF157
     /tmp/ccIlsFBP.s:2920   .debug_str:0000000000000171 .LASF158
     /tmp/ccIlsFBP.s:2894   .debug_str:00000000000000b7 .LASF159
     /tmp/ccIlsFBP.s:3162   .debug_str:00000000000008e9 .LASF124
     /tmp/ccIlsFBP.s:3124   .debug_str:000000000000072a .LASF126
     /tmp/ccIlsFBP.s:3098   .debug_str:0000000000000679 .LASF160
     /tmp/ccIlsFBP.s:3048   .debug_str:0000000000000508 .LASF161
     /tmp/ccIlsFBP.s:2872   .debug_str:0000000000000000 .LASF47
     /tmp/ccIlsFBP.s:3106   .debug_str:00000000000006b6 .LASF48
     /tmp/ccIlsFBP.s:3156   .debug_str:00000000000008b9 .LASF49
     /tmp/ccIlsFBP.s:3146   .debug_str:000000000000087a .LASF50
     /tmp/ccIlsFBP.s:2936   .debug_str:0000000000000205 .LASF51
     /tmp/ccIlsFBP.s:3196   .debug_str:00000000000009af .LASF52
     /tmp/ccIlsFBP.s:3140   .debug_str:0000000000000833 .LASF54
     /tmp/ccIlsFBP.s:3024   .debug_str:000000000000046e .LASF55
     /tmp/ccIlsFBP.s:3172   .debug_str:000000000000091c .LASF56
     /tmp/ccIlsFBP.s:2946   .debug_str:000000000000024b .LASF58
     /tmp/ccIlsFBP.s:2950   .debug_str:0000000000000264 .LASF59
     /tmp/ccIlsFBP.s:3136   .debug_str:0000000000000762 .LASF60
     /tmp/ccIlsFBP.s:2928   .debug_str:00000000000001c6 .LASF61
     /tmp/ccIlsFBP.s:2974   .debug_str:00000000000002fb .LASF62
     /tmp/ccIlsFBP.s:2978   .debug_str:0000000000000318 .LASF63
     /tmp/ccIlsFBP.s:3100   .debug_str:000000000000068f .LASF64
     /tmp/ccIlsFBP.s:2944   .debug_str:0000000000000230 .LASF65
     /tmp/ccIlsFBP.s:2984   .debug_str:000000000000034e .LASF66
     /tmp/ccIlsFBP.s:3186   .debug_str:0000000000000957 .LASF67
     /tmp/ccIlsFBP.s:3152   .debug_str:00000000000008a6 .LASF68
     /tmp/ccIlsFBP.s:3148   .debug_str:0000000000000882 .LASF69
     /tmp/ccIlsFBP.s:3078   .debug_str:00000000000005fc .LASF70
     /tmp/ccIlsFBP.s:3044   .debug_str:00000000000004ec .LASF71
     /tmp/ccIlsFBP.s:3064   .debug_str:0000000000000588 .LASF72
     /tmp/ccIlsFBP.s:3070   .debug_str:00000000000005bd .LASF73
     /tmp/ccIlsFBP.s:3036   .debug_str:00000000000004c5 .LASF74
     /tmp/ccIlsFBP.s:3010   .debug_str:0000000000000409 .LASF75
     /tmp/ccIlsFBP.s:3188   .debug_str:0000000000000971 .LASF76
     /tmp/ccIlsFBP.s:3142   .debug_str:0000000000000843 .LASF77
     /tmp/ccIlsFBP.s:3034   .debug_str:00000000000004bd .LASF78
     /tmp/ccIlsFBP.s:3042   .debug_str:00000000000004d8 .LASF79
     /tmp/ccIlsFBP.s:3018   .debug_str:000000000000044d .LASF80
     /tmp/ccIlsFBP.s:3072   .debug_str:00000000000005d0 .LASF81
     /tmp/ccIlsFBP.s:3206   .debug_str:00000000000009f6 .LASF82
     /tmp/ccIlsFBP.s:2988   .debug_str:0000000000000361 .LASF83
     /tmp/ccIlsFBP.s:3118   .debug_str:0000000000000706 .LASF84
     /tmp/ccIlsFBP.s:3094   .debug_str:000000000000065f .LASF85
     /tmp/ccIlsFBP.s:3096   .debug_str:0000000000000672 .LASF86
GAS LISTING /tmp/ccIlsFBP.s 			page 18


     /tmp/ccIlsFBP.s:2912   .debug_str:000000000000013b .LASF87
     /tmp/ccIlsFBP.s:2938   .debug_str:000000000000020b .LASF88
     /tmp/ccIlsFBP.s:2976   .debug_str:0000000000000306 .LASF89
     /tmp/ccIlsFBP.s:2986   .debug_str:000000000000035b .LASF90
     /tmp/ccIlsFBP.s:2932   .debug_str:00000000000001ea .LASF91
     /tmp/ccIlsFBP.s:2882   .debug_str:0000000000000039 .LASF92
     /tmp/ccIlsFBP.s:3086   .debug_str:0000000000000628 .LASF93
     /tmp/ccIlsFBP.s:3080   .debug_str:0000000000000605 .LASF94
     /tmp/ccIlsFBP.s:3066   .debug_str:000000000000058f .LASF95
     /tmp/ccIlsFBP.s:3174   .debug_str:0000000000000922 .LASF96
     /tmp/ccIlsFBP.s:3192   .debug_str:0000000000000985 .LASF97
     /tmp/ccIlsFBP.s:3168   .debug_str:0000000000000901 .LASF98
     /tmp/ccIlsFBP.s:3028   .debug_str:000000000000047e .LASF99
     /tmp/ccIlsFBP.s:3110   .debug_str:00000000000006c1 .LASF100
     /tmp/ccIlsFBP.s:3022   .debug_str:000000000000045b .LASF101
     /tmp/ccIlsFBP.s:2964   .debug_str:00000000000002af .LASF102
     /tmp/ccIlsFBP.s:2904   .debug_str:0000000000000104 .LASF103
     /tmp/ccIlsFBP.s:3150   .debug_str:0000000000000897 .LASF104
     /tmp/ccIlsFBP.s:2886   .debug_str:0000000000000059 .LASF105
     /tmp/ccIlsFBP.s:3178   .debug_str:0000000000000931 .LASF106
     /tmp/ccIlsFBP.s:3050   .debug_str:000000000000050d .LASF107
     /tmp/ccIlsFBP.s:2998   .debug_str:00000000000003d0 .LASF108
     /tmp/ccIlsFBP.s:3120   .debug_str:000000000000070d .LASF109
     /tmp/ccIlsFBP.s:3180   .debug_str:0000000000000936 .LASF110
     /tmp/ccIlsFBP.s:2994   .debug_str:00000000000003a3 .LASF111
     /tmp/ccIlsFBP.s:3032   .debug_str:00000000000004b8 .LASF112
     /tmp/ccIlsFBP.s:3058   .debug_str:000000000000055a .LASF113
     /tmp/ccIlsFBP.s:3040   .debug_str:00000000000004d3 .LASF114
     /tmp/ccIlsFBP.s:2900   .debug_str:00000000000000ed .LASF115
     /tmp/ccIlsFBP.s:3002   .debug_str:00000000000003db .LASF116
     /tmp/ccIlsFBP.s:3006   .debug_str:00000000000003e5 .LASF117
     /tmp/ccIlsFBP.s:3184   .debug_str:0000000000000952 .LASF118
     /tmp/ccIlsFBP.s:2980   .debug_str:0000000000000330 .LASF119
     /tmp/ccIlsFBP.s:3004   .debug_str:00000000000003e0 .LASF120
     /tmp/ccIlsFBP.s:3102   .debug_str:000000000000069d .LASF121
     /tmp/ccIlsFBP.s:3054   .debug_str:0000000000000542 .LASF122
     /tmp/ccIlsFBP.s:3194   .debug_str:000000000000099b .LASF123
     /tmp/ccIlsFBP.s:3198   .debug_str:00000000000009b5 .LASF125
     /tmp/ccIlsFBP.s:3016   .debug_str:0000000000000434 .LASF127
     /tmp/ccIlsFBP.s:2940   .debug_str:0000000000000211 .LASF128
     /tmp/ccIlsFBP.s:3130   .debug_str:000000000000074f .LASF129
     /tmp/ccIlsFBP.s:3062   .debug_str:000000000000057e .LASF162
     /tmp/ccIlsFBP.s:2962   .debug_str:00000000000002aa .LASF130
     /tmp/ccIlsFBP.s:289    .text:00000000000001b4 .LFE53
     /tmp/ccIlsFBP.s:2757   .debug_loc:0000000000000000 .LLST3
     /tmp/ccIlsFBP.s:3164   .debug_str:00000000000008f1 .LASF131
     /tmp/ccIlsFBP.s:2768   .debug_loc:0000000000000036 .LLST4
     /tmp/ccIlsFBP.s:77     .text:0000000000000054 .LBB26
     /tmp/ccIlsFBP.s:91     .text:000000000000006c .LBE26
     /tmp/ccIlsFBP.s:92     .text:000000000000006c .LBB28
     /tmp/ccIlsFBP.s:119    .text:00000000000000b0 .LBE28
     /tmp/ccIlsFBP.s:125    .text:00000000000000bc .LBB30
     /tmp/ccIlsFBP.s:137    .text:00000000000000c0 .LBE30
     /tmp/ccIlsFBP.s:2775   .debug_loc:0000000000000059 .LLST5
     /tmp/ccIlsFBP.s:146    .text:00000000000000d0 .LBB32
     /tmp/ccIlsFBP.s:166    .text:00000000000000ec .LBE32
     /tmp/ccIlsFBP.s:2782   .debug_loc:000000000000007c .LLST6
GAS LISTING /tmp/ccIlsFBP.s 			page 19


     /tmp/ccIlsFBP.s:2790   .debug_loc:00000000000000a0 .LLST9
     /tmp/ccIlsFBP.s:173    .text:00000000000000f8 .LBB34
     /tmp/ccIlsFBP.s:181    .text:0000000000000100 .LBE34
     /tmp/ccIlsFBP.s:2797   .debug_loc:00000000000000c3 .LLST10
     /tmp/ccIlsFBP.s:2805   .debug_loc:00000000000000e7 .LLST11
     /tmp/ccIlsFBP.s:183    .text:0000000000000100 .LBB36
     /tmp/ccIlsFBP.s:195    .text:0000000000000108 .LBE36
     /tmp/ccIlsFBP.s:2812   .debug_loc:000000000000010a .LLST12
     /tmp/ccIlsFBP.s:237    .text:0000000000000160 .LBB38
     /tmp/ccIlsFBP.s:249    .text:0000000000000170 .LBE38
     /tmp/ccIlsFBP.s:2820   .debug_loc:000000000000012e .LLST13
     /tmp/ccIlsFBP.s:246    .text:0000000000000170 .LVL22
     /tmp/ccIlsFBP.s:143    .text:00000000000000cc .LVL9
     /tmp/ccIlsFBP.s:199    .text:0000000000000110 .LVL15
     /tmp/ccIlsFBP.s:204    .text:000000000000011c .LVL16
     /tmp/ccIlsFBP.s:211    .text:0000000000000134 .LVL17
     /tmp/ccIlsFBP.s:218    .text:0000000000000140 .LVL18
     /tmp/ccIlsFBP.s:222    .text:0000000000000148 .LVL19
     /tmp/ccIlsFBP.s:231    .text:000000000000015c .LVL20
     /tmp/ccIlsFBP.s:253    .text:000000000000017c .LVL23
     /tmp/ccIlsFBP.s:282    .text:00000000000001a8 .LVL28
     /tmp/ccIlsFBP.s:286    .text:00000000000001b4 .LVL29
     /tmp/ccIlsFBP.s:2972   .debug_str:00000000000002f4 .LASF163
     /tmp/ccIlsFBP.s:2876   .debug_str:0000000000000015 .LASF141
     /tmp/ccIlsFBP.s:3076   .debug_str:00000000000005f4 .LASF164
     /tmp/ccIlsFBP.s:2924   .debug_str:000000000000018b .LASF165
     /tmp/ccIlsFBP.s:10     .text:0000000000000000 .LFB52
     /tmp/ccIlsFBP.s:53     .text:000000000000003c .LFE52
     /tmp/ccIlsFBP.s:2827   .debug_loc:0000000000000151 .LLST0
     /tmp/ccIlsFBP.s:32     .text:0000000000000024 .LBB24
     /tmp/ccIlsFBP.s:39     .text:0000000000000028 .LBE24
     /tmp/ccIlsFBP.s:2843   .debug_loc:000000000000019b .LLST1
     /tmp/ccIlsFBP.s:2850   .debug_loc:00000000000001be .LLST2
     /tmp/ccIlsFBP.s:31     .text:0000000000000024 .LVL2
     /tmp/ccIlsFBP.s:2960   .debug_str:00000000000002a5 .LASF134
     /tmp/ccIlsFBP.s:2948   .debug_str:000000000000025a .LASF135
     /tmp/ccIlsFBP.s:3166   .debug_str:00000000000008fc .LASF132
     /tmp/ccIlsFBP.s:3020   .debug_str:0000000000000455 .LASF133
     /tmp/ccIlsFBP.s:2892   .debug_str:00000000000000a1 .LASF136
     /tmp/ccIlsFBP.s:2878   .debug_str:0000000000000028 .LASF137
     /tmp/ccIlsFBP.s:2922   .debug_str:000000000000017f .LASF138
     /tmp/ccIlsFBP.s:2916   .debug_str:0000000000000158 .LASF139
     /tmp/ccIlsFBP.s:2926   .debug_str:0000000000000197 .LASF166
     /tmp/ccIlsFBP.s:3112   .debug_str:00000000000006c8 .LASF140
     /tmp/ccIlsFBP.s:3038   .debug_str:00000000000004cc .LASF142
     /tmp/ccIlsFBP.s:2952   .debug_str:0000000000000270 .LASF143
     /tmp/ccIlsFBP.s:2954   .debug_str:0000000000000283 .LASF144
     /tmp/ccIlsFBP.s:3204   .debug_str:00000000000009e9 .LASF145
     /tmp/ccIlsFBP.s:3068   .debug_str:00000000000005a7 .LASF146
     /tmp/ccIlsFBP.s:3170   .debug_str:000000000000090b .LASF147
     /tmp/ccIlsFBP.s:2884   .debug_str:0000000000000044 .LASF148
     /tmp/ccIlsFBP.s:3074   .debug_str:00000000000005e4 .LASF149
     /tmp/ccIlsFBP.s:3046   .debug_str:0000000000000501 .LASF150
     /tmp/ccIlsFBP.s:2874   .debug_str:0000000000000005 .LASF151
     /tmp/ccIlsFBP.s:3160   .debug_str:00000000000008da .LASF167
     /tmp/ccIlsFBP.s:2930   .debug_str:00000000000001d2 .LASF168
     /tmp/ccIlsFBP.s:164    .text:00000000000000ec .LVL11
GAS LISTING /tmp/ccIlsFBP.s 			page 20


     /tmp/ccIlsFBP.s:267    .text:000000000000018c .LVL24
     /tmp/ccIlsFBP.s:274    .text:0000000000000198 .LVL26
     /tmp/ccIlsFBP.s:278    .text:000000000000019c .LVL27
     /tmp/ccIlsFBP.s:270    .text:0000000000000190 .LVL25
     /tmp/ccIlsFBP.s:124    .text:00000000000000bc .LVL7
     /tmp/ccIlsFBP.s:134    .text:00000000000000c0 .LVL8
     /tmp/ccIlsFBP.s:145    .text:00000000000000d0 .LVL10
     /tmp/ccIlsFBP.s:172    .text:00000000000000f8 .LVL12
     /tmp/ccIlsFBP.s:179    .text:0000000000000100 .LVL13
     /tmp/ccIlsFBP.s:192    .text:0000000000000108 .LVL14
     /tmp/ccIlsFBP.s:236    .text:0000000000000160 .LVL21
     /tmp/ccIlsFBP.s:14     .text:0000000000000000 .LVL0
     /tmp/ccIlsFBP.s:29     .text:000000000000001c .LVL1
     /tmp/ccIlsFBP.s:48     .text:0000000000000034 .LVL4
     /tmp/ccIlsFBP.s:37     .text:0000000000000028 .LVL3
     /tmp/ccIlsFBP.s:328    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccIlsFBP.s:292    .gcc_except_table:0000000000000000 .LLSDA53

UNDEFINED SYMBOLS
_Znwm
HEAP_START_ADDR
_ZN15MemoryAllocator9free_listE
HEAP_END_ADDR
_ZN15MemoryAllocator14allocated_listE
_ZN5Riscv14supervisorTrapEv
_ZN3PCB7wrapperEv
_ZN3PCB7runningE
_Z16switchToUserModev
_Z8userMainv
_ZN6ThreadC1EPFvPvES0_
_ZN6Thread5startEv
_Z15thread_dispatchv
_ZdaPv
_ZdlPv
_Unwind_Resume
__gxx_personality_v0
