GAS LISTING /tmp/ccQFrE26.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	main
   9              	main:
  10              	.LFB57:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** 
   2:src/main.cpp  **** 
   3:src/main.cpp  **** 
   4:src/main.cpp  **** #include "../h/riscv.hpp"
   5:src/main.cpp  **** 
   6:src/main.cpp  **** 
   7:src/main.cpp  **** struct A {
   8:src/main.cpp  ****     int a;
   9:src/main.cpp  ****     int* b = nullptr;
  10:src/main.cpp  **** };
  11:src/main.cpp  **** 
  12:src/main.cpp  **** struct B {
  13:src/main.cpp  ****     int a;
  14:src/main.cpp  ****     int* b = nullptr;
  15:src/main.cpp  ****     long c;
  16:src/main.cpp  ****     char d[50];
  17:src/main.cpp  **** };
  18:src/main.cpp  **** 
  19:src/main.cpp  **** class C{
  20:src/main.cpp  **** public:
  21:src/main.cpp  ****     struct Context
  22:src/main.cpp  ****     {
  23:src/main.cpp  ****         uint64 ra;
  24:src/main.cpp  ****         uint64 sp;
  25:src/main.cpp  ****     };
  26:src/main.cpp  **** 
  27:src/main.cpp  ****     enum State{
  28:src/main.cpp  ****         READY,
  29:src/main.cpp  ****         RUNNING,
  30:src/main.cpp  ****         SUSPENDED,
  31:src/main.cpp  ****         FINISHED
  32:src/main.cpp  ****     };
  33:src/main.cpp  **** 
  34:src/main.cpp  ****     using Body = void (*)(void*);
  35:src/main.cpp  ****     static C *createC(Body body, void* args){
  36:src/main.cpp  ****         return new C(body, args);
  37:src/main.cpp  ****     }
  38:src/main.cpp  **** 
  39:src/main.cpp  ****     void setState(State s) { state = s; }
  40:src/main.cpp  **** private:
  41:src/main.cpp  **** 
  42:src/main.cpp  ****     Body body;
  43:src/main.cpp  ****     void* args = nullptr; //TODD proveri da li ostaje nullptr ili se lepo inicializuje
  44:src/main.cpp  ****     Context context;
  45:src/main.cpp  ****     State state;
  46:src/main.cpp  ****     uint64 *stack;
  47:src/main.cpp  **** 
GAS LISTING /tmp/ccQFrE26.s 			page 2


  48:src/main.cpp  ****     C(Body body, void* args)
  49:src/main.cpp  ****     {
  50:src/main.cpp  ****         this->body = body;
  51:src/main.cpp  ****         stack = nullptr;
  52:src/main.cpp  ****         //stack=(body != nullptr ? new uint64[DEFAULT_STACK_SIZE] : nullptr);
  53:src/main.cpp  ****         context = {   (uint64)&body,
  54:src/main.cpp  ****                       stack != nullptr ? (uint64) &stack[DEFAULT_STACK_SIZE] : 0
  55:src/main.cpp  ****         };
  56:src/main.cpp  ****         this->args=args;
  57:src/main.cpp  ****         state = READY;
  58:src/main.cpp  ****     }
  59:src/main.cpp  **** 
  60:src/main.cpp  **** };
  61:src/main.cpp  **** 
  62:src/main.cpp  **** class D{
  63:src/main.cpp  **** private:
  64:src/main.cpp  ****     uint64 num = 0;
  65:src/main.cpp  **** public:
  66:src/main.cpp  **** 
  67:src/main.cpp  **** 
  68:src/main.cpp  **** 
  69:src/main.cpp  ****     static D* createD(uint64 n){
  70:src/main.cpp  ****         return new D();
  71:src/main.cpp  **** 
  72:src/main.cpp  **** 
  73:src/main.cpp  ****     }
  74:src/main.cpp  **** 
  75:src/main.cpp  **** 
  76:src/main.cpp  **** };
  77:src/main.cpp  **** 
  78:src/main.cpp  **** extern void userMain();
  79:src/main.cpp  **** extern void switchToUserMode();
  80:src/main.cpp  **** int main() {
  12              		.loc 1 80 12
  13              		.cfi_startproc
  14 0000 130101FE 		addi	sp,sp,-32
  15              		.cfi_def_cfa_offset 32
  16 0004 233C1100 		sd	ra,24(sp)
  17 0008 23388100 		sd	s0,16(sp)
  18 000c 23349100 		sd	s1,8(sp)
  19 0010 23302101 		sd	s2,0(sp)
  20              		.cfi_offset 1, -8
  21              		.cfi_offset 8, -16
  22              		.cfi_offset 9, -24
  23              		.cfi_offset 18, -32
  24 0014 13040102 		addi	s0,sp,32
  25              		.cfi_def_cfa 8, 0
  81:src/main.cpp  **** 
  82:src/main.cpp  **** 
  83:src/main.cpp  ****     MemoryAllocator::getInstance().init();
  26              		.loc 1 83 5
  27              	.LBB22:
  28              	.LBB23:
  29              		.file 2 "src/../h/../h/MemoryAllocator.hpp"
   1:src/../h/../h/MemoryAllocator.hpp **** #ifndef PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   2:src/../h/../h/MemoryAllocator.hpp **** #define PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   3:src/../h/../h/MemoryAllocator.hpp **** #include "print.hpp"
GAS LISTING /tmp/ccQFrE26.s 			page 3


   4:src/../h/../h/MemoryAllocator.hpp **** 
   5:src/../h/../h/MemoryAllocator.hpp **** struct Block {
   6:src/../h/../h/MemoryAllocator.hpp ****     size_t size;
   7:src/../h/../h/MemoryAllocator.hpp ****     Block *next;
   8:src/../h/../h/MemoryAllocator.hpp **** };
   9:src/../h/../h/MemoryAllocator.hpp **** 
  10:src/../h/../h/MemoryAllocator.hpp **** class MemoryAllocator {
  11:src/../h/../h/MemoryAllocator.hpp **** 
  12:src/../h/../h/MemoryAllocator.hpp **** private:
  13:src/../h/../h/MemoryAllocator.hpp **** 
  14:src/../h/../h/MemoryAllocator.hpp **** 
  15:src/../h/../h/MemoryAllocator.hpp ****     MemoryAllocator() {}
  16:src/../h/../h/MemoryAllocator.hpp **** 
  17:src/../h/../h/MemoryAllocator.hpp ****     static Block *free_list;
  18:src/../h/../h/MemoryAllocator.hpp ****     static Block *allocated_list;
  19:src/../h/../h/MemoryAllocator.hpp **** 
  20:src/../h/../h/MemoryAllocator.hpp **** 
  21:src/../h/../h/MemoryAllocator.hpp **** public:
  22:src/../h/../h/MemoryAllocator.hpp **** 
  23:src/../h/../h/MemoryAllocator.hpp **** 
  24:src/../h/../h/MemoryAllocator.hpp ****     // Get the singleton instance
  25:src/../h/../h/MemoryAllocator.hpp ****     static MemoryAllocator &getInstance() {
  26:src/../h/../h/MemoryAllocator.hpp ****         static MemoryAllocator instance;
  30              		.loc 2 26 9
  31              		.loc 2 26 32 is_stmt 0
  32 0018 97070000 		lbu	a5,_ZGVZN15MemoryAllocator11getInstanceEvE8instance
  32      83C70700 
  33 0020 63980700 		bnez	a5,.L2
  34              	.LVL0:
  35 0024 93071000 		li	a5,1
  36 0028 17070000 		sb	a5,_ZGVZN15MemoryAllocator11getInstanceEvE8instance,a4
  36      2300F700 
  37              	.LVL1:
  38              	.L2:
  27:src/../h/../h/MemoryAllocator.hpp ****         return instance;
  39              		.loc 2 27 9 is_stmt 1
  40              	.LBE23:
  41              	.LBE22:
  42              	.LBB24:
  43              	.LBB25:
  28:src/../h/../h/MemoryAllocator.hpp ****     }
  29:src/../h/../h/MemoryAllocator.hpp **** 
  30:src/../h/../h/MemoryAllocator.hpp ****     static void init() {
  31:src/../h/../h/MemoryAllocator.hpp ****         // Initialize the free list
  32:src/../h/../h/MemoryAllocator.hpp **** 
  33:src/../h/../h/MemoryAllocator.hpp ****         // For testing purposes
  34:src/../h/../h/MemoryAllocator.hpp **** //        uint64 start = (uint64)((Block *) HEAP_START_ADDR);
  35:src/../h/../h/MemoryAllocator.hpp **** //        printInteger(start);
  36:src/../h/../h/MemoryAllocator.hpp **** //        printString("\n");
  37:src/../h/../h/MemoryAllocator.hpp **** //        uint64 end = (uint64)((Block *) HEAP_END_ADDR);
  38:src/../h/../h/MemoryAllocator.hpp **** //        printInteger(end);
  39:src/../h/../h/MemoryAllocator.hpp **** //        printString("\n");
  40:src/../h/../h/MemoryAllocator.hpp **** 
  41:src/../h/../h/MemoryAllocator.hpp ****         free_list = (Block *) HEAP_START_ADDR;
  44              		.loc 2 41 9
  45              		.loc 2 41 19 is_stmt 0
  46 0030 97070000 		la	a5,HEAP_START_ADDR
GAS LISTING /tmp/ccQFrE26.s 			page 4


  46      83B70700 
  47 0038 03B70700 		ld	a4,0(a5)
  48 003c 97060000 		la	a3,_ZN15MemoryAllocator9free_listE
  48      83B60600 
  49 0044 23B0E600 		sd	a4,0(a3)
  42:src/../h/../h/MemoryAllocator.hpp ****         free_list->size = (uint64 *) HEAP_END_ADDR - (uint64 *) HEAP_START_ADDR;
  50              		.loc 2 42 9 is_stmt 1
  51              		.loc 2 42 27 is_stmt 0
  52 0048 97070000 		la	a5,HEAP_END_ADDR
  52      83B70700 
  53 0050 83B70700 		ld	a5,0(a5)
  54              		.loc 2 42 52
  55 0054 B387E740 		sub	a5,a5,a4
  56 0058 93D73740 		srai	a5,a5,3
  57              		.loc 2 42 25
  58 005c 2330F700 		sd	a5,0(a4)
  43:src/../h/../h/MemoryAllocator.hpp ****         free_list->next = nullptr;
  59              		.loc 2 43 9 is_stmt 1
  60              		.loc 2 43 20 is_stmt 0
  61 0060 83B70600 		ld	a5,0(a3)
  62              		.loc 2 43 25
  63 0064 23B40700 		sd	zero,8(a5)
  44:src/../h/../h/MemoryAllocator.hpp ****         allocated_list = nullptr;
  64              		.loc 2 44 9 is_stmt 1
  65              		.loc 2 44 24 is_stmt 0
  66 0068 97070000 		la	a5,_ZN15MemoryAllocator14allocated_listE
  66      83B70700 
  67 0070 23B00700 		sd	zero,0(a5)
  68              	.LBE25:
  69              	.LBE24:
  84:src/main.cpp  **** 
  85:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap+1);
  70              		.loc 1 85 5 is_stmt 1
  71              		.loc 1 85 19 is_stmt 0
  72 0074 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
  72      83B70700 
  73 007c 93871700 		addi	a5,a5,1
  74              	.LVL2:
  75              	.LBB26:
  76              	.LBB27:
  77              		.file 3 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   2:src/../h/riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   3:src/../h/riscv.hpp **** 
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #include "../h/MemoryAllocator.hpp"
   6:src/../h/riscv.hpp **** #include "PCB.hpp"
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** 
   9:src/../h/riscv.hpp **** #define readUsrReg(reg, dst) __asm__ volatile("mv %0,"#reg : "=r" (dst));
  10:src/../h/riscv.hpp **** #define writeUsrReg(reg, src) __asm__ volatile("mv "#reg", %0" : : "r" (src));
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp **** class Riscv
  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccQFrE26.s 			page 5


  17:src/../h/riscv.hpp **** 
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  20:src/../h/riscv.hpp ****     static void popSppSpie();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  23:src/../h/riscv.hpp ****     static void pushRegisters();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  26:src/../h/riscv.hpp ****     static void popRegisters();
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // read register scause
  29:src/../h/riscv.hpp ****     static uint64 r_scause();
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // write register scause
  32:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // read register sepc
  35:src/../h/riscv.hpp ****     static uint64 r_sepc();
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // write register sepc
  38:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // read register stvec
  41:src/../h/riscv.hpp ****     static uint64 r_stvec();
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // write register stvec
  44:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     // read register stval
  47:src/../h/riscv.hpp ****     static uint64 r_stval();
  48:src/../h/riscv.hpp **** 
  49:src/../h/riscv.hpp ****     // write register stval
  50:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  51:src/../h/riscv.hpp **** 
  52:src/../h/riscv.hpp ****     enum BitMaskSip
  53:src/../h/riscv.hpp ****     {
  54:src/../h/riscv.hpp **** //        SIP_SSIE = (1 << 1),
  55:src/../h/riscv.hpp **** //        SIP_STIE = (1 << 5),
  56:src/../h/riscv.hpp **** //        SIP_SEIE = (1 << 9),
  57:src/../h/riscv.hpp ****         SIP_SSIP = (1<<1),
  58:src/../h/riscv.hpp ****         SIP_SEIP = (1<<9)
  59:src/../h/riscv.hpp ****     };
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // mask set register sip
  62:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // mask clear register sip
  65:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // read register sip
  68:src/../h/riscv.hpp ****     static uint64 r_sip();
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // write register sip
  71:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     enum BitMaskSstatus
GAS LISTING /tmp/ccQFrE26.s 			page 6


  74:src/../h/riscv.hpp ****     {
  75:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  76:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  77:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  78:src/../h/riscv.hpp ****     };
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // mask set register sstatus
  81:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // mask clear register sstatus
  84:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     // read register sstatus
  87:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp ****     // write register sstatus
  90:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp ****     // mask set register sie
  93:src/../h/riscv.hpp ****     static void ms_sie(uint64 mask);
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp ****     // mask clear register sie
  96:src/../h/riscv.hpp ****     static void mc_sie(uint64 mask);
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp ****     static void supervisorTrap();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     static long r_a0();
 101:src/../h/riscv.hpp **** 
 102:src/../h/riscv.hpp ****     static void w_a0(long a0);
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp ****     static uint64 r_a1();
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp ****     static void w_a1(uint64 a1);
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp ****     static uint64 r_a2();
 109:src/../h/riscv.hpp **** 
 110:src/../h/riscv.hpp ****     static void w_a2(uint64 a1);
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp ****     static uint64 r_a3();
 113:src/../h/riscv.hpp **** 
 114:src/../h/riscv.hpp ****     static void w_a3(uint64 a1);
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp ****     static void push_a0(long a0);
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** private:
 119:src/../h/riscv.hpp ****     static void trapHandler();
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp **** 
 122:src/../h/riscv.hpp **** };
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 125:src/../h/riscv.hpp **** {
 126:src/../h/riscv.hpp ****     uint64 volatile scause;
 127:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 128:src/../h/riscv.hpp ****     return scause;
 129:src/../h/riscv.hpp **** }
 130:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccQFrE26.s 			page 7


 131:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 132:src/../h/riscv.hpp **** {
 133:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 137:src/../h/riscv.hpp **** {
 138:src/../h/riscv.hpp ****     uint64 volatile sepc;
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 140:src/../h/riscv.hpp ****     return sepc;
 141:src/../h/riscv.hpp **** }
 142:src/../h/riscv.hpp **** 
 143:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 144:src/../h/riscv.hpp **** {
 145:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 146:src/../h/riscv.hpp **** }
 147:src/../h/riscv.hpp **** 
 148:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 149:src/../h/riscv.hpp **** {
 150:src/../h/riscv.hpp ****     uint64 volatile stvec;
 151:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 152:src/../h/riscv.hpp ****     return stvec;
 153:src/../h/riscv.hpp **** }
 154:src/../h/riscv.hpp **** 
 155:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 156:src/../h/riscv.hpp **** {
 157:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  78              		.loc 3 157 5 is_stmt 1
  79              		.loc 3 157 69 is_stmt 0
  80              	#APP
  81              	# 157 "src/../h/riscv.hpp" 1
 158              	}
  82              		csrw stvec, a5
  83              	# 0 "" 2
  84              	.LVL3:
  85              	#NO_APP
  86              	.LBE27:
  87              	.LBE26:
  86:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  88              		.loc 1 86 5 is_stmt 1
  89              	.LBB28:
  90              	.LBB29:
 159:src/../h/riscv.hpp **** 
 160:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 161:src/../h/riscv.hpp **** {
 162:src/../h/riscv.hpp ****     uint64 volatile stval;
 163:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 164:src/../h/riscv.hpp ****     return stval;
 165:src/../h/riscv.hpp **** }
 166:src/../h/riscv.hpp **** 
 167:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 168:src/../h/riscv.hpp **** {
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 170:src/../h/riscv.hpp **** }
 171:src/../h/riscv.hpp **** 
 172:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 173:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccQFrE26.s 			page 8


 174:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 175:src/../h/riscv.hpp **** }
 176:src/../h/riscv.hpp **** 
 177:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 178:src/../h/riscv.hpp **** {
 179:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 180:src/../h/riscv.hpp **** }
 181:src/../h/riscv.hpp **** 
 182:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 183:src/../h/riscv.hpp **** {
 184:src/../h/riscv.hpp ****     uint64 volatile sip;
 185:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 186:src/../h/riscv.hpp ****     return sip;
 187:src/../h/riscv.hpp **** }
 188:src/../h/riscv.hpp **** 
 189:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 190:src/../h/riscv.hpp **** {
 191:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 192:src/../h/riscv.hpp **** }
 193:src/../h/riscv.hpp **** 
 194:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 195:src/../h/riscv.hpp **** {
 196:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
  91              		.loc 3 196 5
  92              		.loc 3 196 68 is_stmt 0
  93 0084 93072000 		li	a5,2
  94              	#APP
  95              	# 196 "src/../h/riscv.hpp" 1
 197              	}
  96              		csrs sstatus, a5
  97              	# 0 "" 2
  98              	.LVL4:
  99              	#NO_APP
 100              	.LBE29:
 101              	.LBE28:
  87:src/main.cpp  **** 
  88:src/main.cpp  **** //    D* d1 = new D(2);
  89:src/main.cpp  **** //    D* d3 = new D(3);
  90:src/main.cpp  **** //    D* d4 = new D(5);
  91:src/main.cpp  **** 
  92:src/main.cpp  ****     D* d1 = new D();
 102              		.loc 1 92 5 is_stmt 1
 103              		.loc 1 92 19 is_stmt 0
 104 008c 13058000 		li	a0,8
 105 0090 97000000 		call	_Znwm@plt
 105      E7800000 
 106              	.LVL5:
 107 0098 13090500 		mv	s2,a0
 108 009c 23300500 		sd	zero,0(a0)
 109              	.LVL6:
  93:src/main.cpp  ****     D* d2 = D::createD(4);
 110              		.loc 1 93 5 is_stmt 1
 111              	.LBB30:
 112              	.LBB31:
  70:src/main.cpp  **** 
 113              		.loc 1 70 9
  70:src/main.cpp  **** 
GAS LISTING /tmp/ccQFrE26.s 			page 9


 114              		.loc 1 70 22 is_stmt 0
 115 00a0 13058000 		li	a0,8
 116              	.LVL7:
 117 00a4 97000000 		call	_Znwm@plt
 117      E7800000 
 118              	.LVL8:
 119 00ac 93040500 		mv	s1,a0
 120 00b0 23300500 		sd	zero,0(a0)
 121              	.LVL9:
 122              	.LBE31:
 123              	.LBE30:
  94:src/main.cpp  ****     delete d1;
 124              		.loc 1 94 5 is_stmt 1
 125              		.loc 1 94 14 is_stmt 0
 126 00b4 63080900 		beqz	s2,.L3
 127              		.loc 1 94 12 discriminator 1
 128 00b8 13050900 		mv	a0,s2
 129 00bc 97000000 		call	_ZdlPv@plt
 129      E7800000 
 130              	.LVL10:
 131              	.L3:
  95:src/main.cpp  ****     delete d2;
 132              		.loc 1 95 5 is_stmt 1
 133              		.loc 1 95 14 is_stmt 0
 134 00c4 63880400 		beqz	s1,.L4
 135              		.loc 1 95 12 discriminator 1
 136 00c8 13850400 		mv	a0,s1
 137 00cc 97000000 		call	_ZdlPv@plt
 137      E7800000 
 138              	.LVL11:
 139              	.L4:
  96:src/main.cpp  ****     //delete d3;
  97:src/main.cpp  ****     //delete d4;
  98:src/main.cpp  **** 
  99:src/main.cpp  **** //    PCB* pcb = new PCB(nullptr, nullptr, nullptr);
 100:src/main.cpp  **** //    PCB::running = pcb;
 101:src/main.cpp  **** //    PCB::running->setState(PCB::RUNNING);
 102:src/main.cpp  **** //
 103:src/main.cpp  **** //    switchToUserMode();
 104:src/main.cpp  **** //
 105:src/main.cpp  **** //    userMain();
 106:src/main.cpp  **** //    delete pcb;
 107:src/main.cpp  **** 
 108:src/main.cpp  **** 
 109:src/main.cpp  ****     //printString("MAIN START\n");
 110:src/main.cpp  **** 
 111:src/main.cpp  **** //    thread_t t;
 112:src/main.cpp  **** //    thread_create(&t, (void (*)(void *))(userMain), nullptr);
 113:src/main.cpp  **** //
 114:src/main.cpp  **** //    while(!((PCB*)t)->isFinished()){
 115:src/main.cpp  **** //        thread_dispatch();
 116:src/main.cpp  **** //    }
 117:src/main.cpp  **** //
 118:src/main.cpp  **** //    delete (PCB*)t;
 119:src/main.cpp  **** //
 120:src/main.cpp  **** //    delete PCB::running;
 121:src/main.cpp  **** //
GAS LISTING /tmp/ccQFrE26.s 			page 10


 122:src/main.cpp  **** //    A* a0 = new A();
 123:src/main.cpp  **** //    B* b0 = new B();
 124:src/main.cpp  **** //    A* a1 = new A();
 125:src/main.cpp  **** //    a0->a = 0;
 126:src/main.cpp  **** //    a1->a = 1;
 127:src/main.cpp  **** //    b0->a = 10;
 128:src/main.cpp  **** //    delete(a0);
 129:src/main.cpp  **** //    B* b1 = new B();
 130:src/main.cpp  **** //    b1->a = 11;
 131:src/main.cpp  **** //    delete(a1);
 132:src/main.cpp  **** //    delete(b0);
 133:src/main.cpp  **** //    delete(b1);
 134:src/main.cpp  **** //
 135:src/main.cpp  **** //
 136:src/main.cpp  **** //
 137:src/main.cpp  **** //    //printString("Finished\n");
 138:src/main.cpp  **** //
 139:src/main.cpp  ****     return 0;
 140              		.loc 1 139 5 is_stmt 1
 140:src/main.cpp  **** }
 141              		.loc 1 140 1 is_stmt 0
 142 00d4 13050000 		li	a0,0
 143 00d8 83308101 		ld	ra,24(sp)
 144              		.cfi_restore 1
 145 00dc 03340101 		ld	s0,16(sp)
 146              		.cfi_restore 8
 147              		.cfi_def_cfa 2, 32
 148 00e0 83348100 		ld	s1,8(sp)
 149              		.cfi_restore 9
 150              	.LVL12:
 151 00e4 03390100 		ld	s2,0(sp)
 152              		.cfi_restore 18
 153              	.LVL13:
 154 00e8 13010102 		addi	sp,sp,32
 155              		.cfi_def_cfa_offset 0
 156 00ec 67800000 		jr	ra
 157              		.cfi_endproc
 158              	.LFE57:
 160              		.weak	_ZGVZN15MemoryAllocator11getInstanceEvE8instance
 161              		.section	.bss._ZGVZN15MemoryAllocator11getInstanceEvE8instance,"awG",@nobits,_ZGVZN15MemoryAllocat
 162              		.align	3
 165              	_ZGVZN15MemoryAllocator11getInstanceEvE8instance:
 166 0000 00000000 		.zero	8
 166      00000000 
 167              		.text
 168              	.Letext0:
 169              		.file 4 "src/../h/../h/../lib/hw.h"
GAS LISTING /tmp/ccQFrE26.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccQFrE26.s:9      .text:0000000000000000 main
     /tmp/ccQFrE26.s:13     .text:0000000000000000 .L0 
     /tmp/ccQFrE26.s:14     .text:0000000000000000 .L0 
     /tmp/ccQFrE26.s:15     .text:0000000000000004 .L0 
     /tmp/ccQFrE26.s:20     .text:0000000000000014 .L0 
     /tmp/ccQFrE26.s:21     .text:0000000000000014 .L0 
     /tmp/ccQFrE26.s:22     .text:0000000000000014 .L0 
     /tmp/ccQFrE26.s:23     .text:0000000000000014 .L0 
     /tmp/ccQFrE26.s:25     .text:0000000000000018 .L0 
     /tmp/ccQFrE26.s:30     .text:0000000000000018 .L0 
     /tmp/ccQFrE26.s:31     .text:0000000000000018 .L0 
     /tmp/ccQFrE26.s:165    .bss._ZGVZN15MemoryAllocator11getInstanceEvE8instance:0000000000000000 _ZGVZN15MemoryAllocator11getInstanceEvE8instance
     /tmp/ccQFrE26.s:32     .text:0000000000000018 .L0 
     /tmp/ccQFrE26.s:44     .text:0000000000000030 .L0 
     /tmp/ccQFrE26.s:45     .text:0000000000000030 .L0 
     /tmp/ccQFrE26.s:46     .text:0000000000000030 .L0 
     /tmp/ccQFrE26.s:51     .text:0000000000000048 .L0 
     /tmp/ccQFrE26.s:52     .text:0000000000000048 .L0 
     /tmp/ccQFrE26.s:55     .text:0000000000000054 .L0 
     /tmp/ccQFrE26.s:58     .text:000000000000005c .L0 
     /tmp/ccQFrE26.s:60     .text:0000000000000060 .L0 
     /tmp/ccQFrE26.s:61     .text:0000000000000060 .L0 
     /tmp/ccQFrE26.s:63     .text:0000000000000064 .L0 
     /tmp/ccQFrE26.s:65     .text:0000000000000068 .L0 
     /tmp/ccQFrE26.s:66     .text:0000000000000068 .L0 
     /tmp/ccQFrE26.s:71     .text:0000000000000074 .L0 
     /tmp/ccQFrE26.s:72     .text:0000000000000074 .L0 
     /tmp/ccQFrE26.s:79     .text:0000000000000080 .L0 
  src/../h/riscv.hpp:157    .text:0000000000000080 .L0 
     /tmp/ccQFrE26.s:91     .text:0000000000000084 .L0 
     /tmp/ccQFrE26.s:92     .text:0000000000000084 .L0 
     /tmp/ccQFrE26.s:93     .text:0000000000000084 .L0 
     /tmp/ccQFrE26.s:103    .text:000000000000008c .L0 
     /tmp/ccQFrE26.s:104    .text:000000000000008c .L0 
     /tmp/ccQFrE26.s:113    .text:00000000000000a0 .L0 
     /tmp/ccQFrE26.s:114    .text:00000000000000a0 .L0 
     /tmp/ccQFrE26.s:115    .text:00000000000000a0 .L0 
     /tmp/ccQFrE26.s:125    .text:00000000000000b4 .L0 
     /tmp/ccQFrE26.s:126    .text:00000000000000b4 .L0 
     /tmp/ccQFrE26.s:128    .text:00000000000000b8 .L0 
     /tmp/ccQFrE26.s:133    .text:00000000000000c4 .L0 
     /tmp/ccQFrE26.s:134    .text:00000000000000c4 .L0 
     /tmp/ccQFrE26.s:136    .text:00000000000000c8 .L0 
     /tmp/ccQFrE26.s:141    .text:00000000000000d4 .L0 
     /tmp/ccQFrE26.s:142    .text:00000000000000d4 .L0 
     /tmp/ccQFrE26.s:144    .text:00000000000000dc .L0 
     /tmp/ccQFrE26.s:146    .text:00000000000000e0 .L0 
     /tmp/ccQFrE26.s:147    .text:00000000000000e0 .L0 
     /tmp/ccQFrE26.s:149    .text:00000000000000e4 .L0 
     /tmp/ccQFrE26.s:152    .text:00000000000000e8 .L0 
     /tmp/ccQFrE26.s:155    .text:00000000000000ec .L0 
     /tmp/ccQFrE26.s:157    .text:00000000000000f0 .L0 
     /tmp/ccQFrE26.s:170    .text:00000000000000f0 .L0 
     /tmp/ccQFrE26.s:32     .text:0000000000000018 .L0 
     /tmp/ccQFrE26.s:36     .text:0000000000000028 .L0 
GAS LISTING /tmp/ccQFrE26.s 			page 12


     /tmp/ccQFrE26.s:46     .text:0000000000000030 .L0 
     /tmp/ccQFrE26.s:48     .text:000000000000003c .L0 
     /tmp/ccQFrE26.s:52     .text:0000000000000048 .L0 
     /tmp/ccQFrE26.s:66     .text:0000000000000068 .L0 
     /tmp/ccQFrE26.s:72     .text:0000000000000074 .L0 
     /tmp/ccQFrE26.s:38     .text:0000000000000030 .L2
     /tmp/ccQFrE26.s:131    .text:00000000000000c4 .L3
     /tmp/ccQFrE26.s:139    .text:00000000000000d4 .L4
     /tmp/ccQFrE26.s:1027   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccQFrE26.s:2071   .debug_str:0000000000000597 .LASF115
     /tmp/ccQFrE26.s:1929   .debug_str:00000000000001a6 .LASF116
     /tmp/ccQFrE26.s:2075   .debug_str:000000000000066f .LASF117
     /tmp/ccQFrE26.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccQFrE26.s:168    .text:00000000000000f0 .Letext0
     /tmp/ccQFrE26.s:1875   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccQFrE26.s:1949   .debug_str:0000000000000237 .LASF0
     /tmp/ccQFrE26.s:1979   .debug_str:00000000000002fb .LASF1
     /tmp/ccQFrE26.s:2035   .debug_str:00000000000004a1 .LASF2
     /tmp/ccQFrE26.s:2043   .debug_str:00000000000004e4 .LASF4
     /tmp/ccQFrE26.s:1957   .debug_str:000000000000026b .LASF3
     /tmp/ccQFrE26.s:1881   .debug_str:0000000000000020 .LASF5
     /tmp/ccQFrE26.s:2017   .debug_str:0000000000000421 .LASF6
     /tmp/ccQFrE26.s:1973   .debug_str:00000000000002d0 .LASF7
     /tmp/ccQFrE26.s:1937   .debug_str:00000000000001c4 .LASF8
     /tmp/ccQFrE26.s:1941   .debug_str:00000000000001f4 .LASF9
     /tmp/ccQFrE26.s:1897   .debug_str:00000000000000a0 .LASF10
     /tmp/ccQFrE26.s:1927   .debug_str:0000000000000197 .LASF11
     /tmp/ccQFrE26.s:1905   .debug_str:00000000000000d0 .LASF12
     /tmp/ccQFrE26.s:1895   .debug_str:0000000000000090 .LASF13
     /tmp/ccQFrE26.s:2063   .debug_str:0000000000000568 .LASF14
     /tmp/ccQFrE26.s:1919   .debug_str:0000000000000154 .LASF15
     /tmp/ccQFrE26.s:2055   .debug_str:000000000000052b .LASF16
     /tmp/ccQFrE26.s:1965   .debug_str:00000000000002af .LASF118
     /tmp/ccQFrE26.s:1977   .debug_str:00000000000002f6 .LASF17
     /tmp/ccQFrE26.s:1899   .debug_str:00000000000000af .LASF18
     /tmp/ccQFrE26.s:2013   .debug_str:0000000000000400 .LASF28
     /tmp/ccQFrE26.s:1887   .debug_str:000000000000004e .LASF46
     /tmp/ccQFrE26.s:2083   .debug_str:00000000000006bf .LASF19
     /tmp/ccQFrE26.s:2057   .debug_str:0000000000000541 .LASF20
     /tmp/ccQFrE26.s:2109   .debug_str:0000000000000749 .LASF41
     /tmp/ccQFrE26.s:1993   .debug_str:000000000000035b .LASF43
     /tmp/ccQFrE26.s:1889   .debug_str:0000000000000067 .LASF33
     /tmp/ccQFrE26.s:2119   .debug_str:0000000000000795 .LASF35
     /tmp/ccQFrE26.s:2125   .debug_str:00000000000007c6 .LASF21
     /tmp/ccQFrE26.s:1939   .debug_str:00000000000001d4 .LASF23
     /tmp/ccQFrE26.s:1989   .debug_str:000000000000033a .LASF22
     /tmp/ccQFrE26.s:2009   .debug_str:00000000000003d4 .LASF24
     /tmp/ccQFrE26.s:1961   .debug_str:000000000000028e .LASF119
     /tmp/ccQFrE26.s:2037   .debug_str:00000000000004af .LASF25
     /tmp/ccQFrE26.s:2085   .debug_str:00000000000006c9 .LASF26
     /tmp/ccQFrE26.s:1987   .debug_str:0000000000000335 .LASF27
     /tmp/ccQFrE26.s:2093   .debug_str:0000000000000703 .LASF29
     /tmp/ccQFrE26.s:2087   .debug_str:00000000000006e5 .LASF120
     /tmp/ccQFrE26.s:1923   .debug_str:0000000000000185 .LASF30
     /tmp/ccQFrE26.s:2069   .debug_str:000000000000058a .LASF31
     /tmp/ccQFrE26.s:1909   .debug_str:000000000000010f .LASF32
     /tmp/ccQFrE26.s:1943   .debug_str:0000000000000202 .LASF34
GAS LISTING /tmp/ccQFrE26.s 			page 13


     /tmp/ccQFrE26.s:1947   .debug_str:000000000000021f .LASF36
     /tmp/ccQFrE26.s:2049   .debug_str:0000000000000505 .LASF37
     /tmp/ccQFrE26.s:1921   .debug_str:000000000000016a .LASF38
     /tmp/ccQFrE26.s:1951   .debug_str:0000000000000244 .LASF39
     /tmp/ccQFrE26.s:2105   .debug_str:0000000000000727 .LASF40
     /tmp/ccQFrE26.s:2081   .debug_str:00000000000006b6 .LASF42
     /tmp/ccQFrE26.s:2077   .debug_str:0000000000000692 .LASF44
     /tmp/ccQFrE26.s:2031   .debug_str:000000000000048d .LASF45
     /tmp/ccQFrE26.s:2003   .debug_str:00000000000003a7 .LASF47
     /tmp/ccQFrE26.s:2019   .debug_str:0000000000000434 .LASF48
     /tmp/ccQFrE26.s:2023   .debug_str:0000000000000454 .LASF49
     /tmp/ccQFrE26.s:1999   .debug_str:000000000000038c .LASF50
     /tmp/ccQFrE26.s:1975   .debug_str:00000000000002e3 .LASF51
     /tmp/ccQFrE26.s:2107   .debug_str:0000000000000741 .LASF52
     /tmp/ccQFrE26.s:2073   .debug_str:000000000000065b .LASF53
     /tmp/ccQFrE26.s:1997   .debug_str:0000000000000384 .LASF54
     /tmp/ccQFrE26.s:2001   .debug_str:0000000000000393 .LASF55
     /tmp/ccQFrE26.s:1981   .debug_str:000000000000030e .LASF56
     /tmp/ccQFrE26.s:2027   .debug_str:0000000000000471 .LASF57
     /tmp/ccQFrE26.s:2123   .debug_str:00000000000007be .LASF58
     /tmp/ccQFrE26.s:1955   .debug_str:0000000000000257 .LASF59
     /tmp/ccQFrE26.s:2059   .debug_str:0000000000000550 .LASF60
     /tmp/ccQFrE26.s:2045   .debug_str:00000000000004eb .LASF61
     /tmp/ccQFrE26.s:2047   .debug_str:00000000000004fe .LASF62
     /tmp/ccQFrE26.s:1901   .debug_str:00000000000000b4 .LASF63
     /tmp/ccQFrE26.s:1915   .debug_str:0000000000000145 .LASF64
     /tmp/ccQFrE26.s:1945   .debug_str:000000000000020d .LASF65
     /tmp/ccQFrE26.s:1953   .debug_str:0000000000000251 .LASF66
     /tmp/ccQFrE26.s:1911   .debug_str:000000000000011b .LASF67
     /tmp/ccQFrE26.s:1883   .debug_str:0000000000000027 .LASF68
     /tmp/ccQFrE26.s:2039   .debug_str:00000000000004b9 .LASF69
     /tmp/ccQFrE26.s:2033   .debug_str:0000000000000496 .LASF70
     /tmp/ccQFrE26.s:1913   .debug_str:000000000000012d .LASF71
     /tmp/ccQFrE26.s:2095   .debug_str:0000000000000709 .LASF72
     /tmp/ccQFrE26.s:2111   .debug_str:0000000000000755 .LASF73
     /tmp/ccQFrE26.s:2091   .debug_str:00000000000006f9 .LASF74
     /tmp/ccQFrE26.s:1991   .debug_str:0000000000000345 .LASF75
     /tmp/ccQFrE26.s:2053   .debug_str:0000000000000524 .LASF76
     /tmp/ccQFrE26.s:2041   .debug_str:00000000000004d1 .LASF77
     /tmp/ccQFrE26.s:1935   .debug_str:00000000000001bd .LASF78
     /tmp/ccQFrE26.s:1893   .debug_str:000000000000007d .LASF79
     /tmp/ccQFrE26.s:2079   .debug_str:00000000000006a7 .LASF80
     /tmp/ccQFrE26.s:1885   .debug_str:0000000000000032 .LASF81
     /tmp/ccQFrE26.s:2097   .debug_str:0000000000000713 .LASF82
     /tmp/ccQFrE26.s:2007   .debug_str:00000000000003c3 .LASF83
     /tmp/ccQFrE26.s:1963   .debug_str:00000000000002aa .LASF84
     /tmp/ccQFrE26.s:2061   .debug_str:0000000000000557 .LASF85
     /tmp/ccQFrE26.s:2099   .debug_str:0000000000000718 .LASF86
     /tmp/ccQFrE26.s:1959   .debug_str:000000000000027d .LASF87
     /tmp/ccQFrE26.s:1995   .debug_str:000000000000037f .LASF88
     /tmp/ccQFrE26.s:2015   .debug_str:0000000000000410 .LASF89
     /tmp/ccQFrE26.s:2101   .debug_str:000000000000071d .LASF90
     /tmp/ccQFrE26.s:1891   .debug_str:000000000000006c .LASF91
     /tmp/ccQFrE26.s:1967   .debug_str:00000000000002b5 .LASF92
     /tmp/ccQFrE26.s:1971   .debug_str:00000000000002bf .LASF93
     /tmp/ccQFrE26.s:2103   .debug_str:0000000000000722 .LASF94
     /tmp/ccQFrE26.s:2067   .debug_str:0000000000000579 .LASF95
GAS LISTING /tmp/ccQFrE26.s 			page 14


     /tmp/ccQFrE26.s:1969   .debug_str:00000000000002ba .LASF96
     /tmp/ccQFrE26.s:2051   .debug_str:0000000000000513 .LASF97
     /tmp/ccQFrE26.s:2011   .debug_str:00000000000003f8 .LASF98
     /tmp/ccQFrE26.s:2113   .debug_str:000000000000076b .LASF99
     /tmp/ccQFrE26.s:2115   .debug_str:000000000000077f .LASF121
     /tmp/ccQFrE26.s:2021   .debug_str:000000000000043b .LASF122
     /tmp/ccQFrE26.s:1917   .debug_str:000000000000014b .LASF100
     /tmp/ccQFrE26.s:2065   .debug_str:0000000000000574 .LASF101
     /tmp/ccQFrE26.s:2029   .debug_str:0000000000000485 .LASF102
     /tmp/ccQFrE26.s:1879   .debug_str:0000000000000010 .LASF103
     /tmp/ccQFrE26.s:2025   .debug_str:0000000000000467 .LASF123
     /tmp/ccQFrE26.s:1933   .debug_str:00000000000001b8 .LASF104
     /tmp/ccQFrE26.s:10     .text:0000000000000000 .LFB57
     /tmp/ccQFrE26.s:158    .text:00000000000000f0 .LFE57
     /tmp/ccQFrE26.s:1821   .debug_loc:0000000000000000 .LLST0
     /tmp/ccQFrE26.s:1832   .debug_loc:0000000000000036 .LLST1
     /tmp/ccQFrE26.s:27     .text:0000000000000018 .LBB22
     /tmp/ccQFrE26.s:41     .text:0000000000000030 .LBE22
     /tmp/ccQFrE26.s:42     .text:0000000000000030 .LBB24
     /tmp/ccQFrE26.s:69     .text:0000000000000074 .LBE24
     /tmp/ccQFrE26.s:75     .text:0000000000000080 .LBB26
     /tmp/ccQFrE26.s:87     .text:0000000000000084 .LBE26
     /tmp/ccQFrE26.s:1839   .debug_loc:0000000000000059 .LLST2
     /tmp/ccQFrE26.s:89     .text:0000000000000084 .LBB28
     /tmp/ccQFrE26.s:101    .text:000000000000008c .LBE28
     /tmp/ccQFrE26.s:1846   .debug_loc:000000000000007c .LLST3
     /tmp/ccQFrE26.s:111    .text:00000000000000a0 .LBB30
     /tmp/ccQFrE26.s:123    .text:00000000000000b4 .LBE30
     /tmp/ccQFrE26.s:1854   .debug_loc:00000000000000a0 .LLST4
     /tmp/ccQFrE26.s:118    .text:00000000000000ac .LVL8
     /tmp/ccQFrE26.s:106    .text:0000000000000098 .LVL5
     /tmp/ccQFrE26.s:130    .text:00000000000000c4 .LVL10
     /tmp/ccQFrE26.s:138    .text:00000000000000d4 .LVL11
     /tmp/ccQFrE26.s:1931   .debug_str:00000000000001b3 .LASF108
     /tmp/ccQFrE26.s:2117   .debug_str:000000000000078b .LASF109
     /tmp/ccQFrE26.s:2089   .debug_str:00000000000006f4 .LASF105
     /tmp/ccQFrE26.s:1983   .debug_str:0000000000000316 .LASF106
     /tmp/ccQFrE26.s:1903   .debug_str:00000000000000c7 .LASF107
     /tmp/ccQFrE26.s:1907   .debug_str:00000000000000e0 .LASF124
     /tmp/ccQFrE26.s:1985   .debug_str:000000000000031c .LASF110
     /tmp/ccQFrE26.s:1925   .debug_str:0000000000000191 .LASF111
     /tmp/ccQFrE26.s:2121   .debug_str:00000000000007b1 .LASF113
     /tmp/ccQFrE26.s:2005   .debug_str:00000000000003bc .LASF112
     /tmp/ccQFrE26.s:1877   .debug_str:0000000000000000 .LASF114
     /tmp/ccQFrE26.s:109    .text:00000000000000a0 .LVL6
     /tmp/ccQFrE26.s:116    .text:00000000000000a4 .LVL7
     /tmp/ccQFrE26.s:153    .text:00000000000000e8 .LVL13
     /tmp/ccQFrE26.s:121    .text:00000000000000b4 .LVL9
     /tmp/ccQFrE26.s:150    .text:00000000000000e4 .LVL12
     /tmp/ccQFrE26.s:74     .text:0000000000000080 .LVL2
     /tmp/ccQFrE26.s:84     .text:0000000000000084 .LVL3
     /tmp/ccQFrE26.s:98     .text:000000000000008c .LVL4
     /tmp/ccQFrE26.s:171    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
HEAP_START_ADDR
_ZN15MemoryAllocator9free_listE
GAS LISTING /tmp/ccQFrE26.s 			page 15


HEAP_END_ADDR
_ZN15MemoryAllocator14allocated_listE
_ZN5Riscv14supervisorTrapEv
_Znwm
_ZdlPv
