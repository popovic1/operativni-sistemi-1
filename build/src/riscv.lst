GAS LISTING /tmp/ccRfXiBo.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB48:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** #include "../h/riscv.hpp"
   2:src/riscv.cpp **** 
   3:src/riscv.cpp **** 
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** void Riscv::popSppSpie()
   6:src/riscv.cpp **** {
  12              		.loc 1 6 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
   7:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 7 5
  21              		.loc 1 7 39 is_stmt 0
  22              	#APP
  23              	# 7 "src/riscv.cpp" 1
   8              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 8 5 is_stmt 1
  27              		.loc 1 8 30 is_stmt 0
  28              	# 8 "src/riscv.cpp" 1
   9              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 9 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE48:
  42              		.align	2
  43              		.globl	_ZN5Riscv11trapHandlerEv
  45              	_ZN5Riscv11trapHandlerEv:
  46              	.LFB49:
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** void Riscv::trapHandler() {
  47              		.loc 1 11 27 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101F8 		addi	sp,sp,-128
GAS LISTING /tmp/ccRfXiBo.s 			page 2


  50              		.cfi_def_cfa_offset 128
  51 0024 233C1106 		sd	ra,120(sp)
  52 0028 23388106 		sd	s0,112(sp)
  53 002c 23349106 		sd	s1,104(sp)
  54 0030 23302107 		sd	s2,96(sp)
  55 0034 233C3105 		sd	s3,88(sp)
  56 0038 23384105 		sd	s4,80(sp)
  57 003c 23345105 		sd	s5,72(sp)
  58 0040 23306105 		sd	s6,64(sp)
  59              		.cfi_offset 1, -8
  60              		.cfi_offset 8, -16
  61              		.cfi_offset 9, -24
  62              		.cfi_offset 18, -32
  63              		.cfi_offset 19, -40
  64              		.cfi_offset 20, -48
  65              		.cfi_offset 21, -56
  66              		.cfi_offset 22, -64
  67 0044 13040108 		addi	s0,sp,128
  68              		.cfi_def_cfa 8, 0
  12:src/riscv.cpp ****     uint64 scause = r_scause();
  69              		.loc 1 12 5
  70              	.LBB54:
  71              	.LBB55:
  72              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   2:src/../h/riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   3:src/../h/riscv.hpp **** 
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #include "../h/MemoryAllocator.hpp"
   6:src/../h/riscv.hpp **** #include "PCB.hpp"
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** 
   9:src/../h/riscv.hpp **** #define readUsrReg(reg, dst) __asm__ volatile("mv %0,"#reg : "=r" (dst));
  10:src/../h/riscv.hpp **** #define writeUsrReg(reg, src) __asm__ volatile("mv "#reg", %0" : : "r" (src));
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp **** class Riscv
  14:src/../h/riscv.hpp **** {
  15:src/../h/riscv.hpp **** public:
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp **** 
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  20:src/../h/riscv.hpp ****     static void popSppSpie();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  23:src/../h/riscv.hpp ****     static void pushRegisters();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  26:src/../h/riscv.hpp ****     static void popRegisters();
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // read register scause
  29:src/../h/riscv.hpp ****     static uint64 r_scause();
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // write register scause
  32:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  33:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccRfXiBo.s 			page 3


  34:src/../h/riscv.hpp ****     // read register sepc
  35:src/../h/riscv.hpp ****     static uint64 r_sepc();
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // write register sepc
  38:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // read register stvec
  41:src/../h/riscv.hpp ****     static uint64 r_stvec();
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // write register stvec
  44:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     // read register stval
  47:src/../h/riscv.hpp ****     static uint64 r_stval();
  48:src/../h/riscv.hpp **** 
  49:src/../h/riscv.hpp ****     // write register stval
  50:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  51:src/../h/riscv.hpp **** 
  52:src/../h/riscv.hpp ****     enum BitMaskSip
  53:src/../h/riscv.hpp ****     {
  54:src/../h/riscv.hpp **** //        SIP_SSIE = (1 << 1),
  55:src/../h/riscv.hpp **** //        SIP_STIE = (1 << 5),
  56:src/../h/riscv.hpp **** //        SIP_SEIE = (1 << 9),
  57:src/../h/riscv.hpp ****         SIP_SSIP = (1<<1),
  58:src/../h/riscv.hpp ****         SIP_SEIP = (1<<9)
  59:src/../h/riscv.hpp ****     };
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // mask set register sip
  62:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // mask clear register sip
  65:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // read register sip
  68:src/../h/riscv.hpp ****     static uint64 r_sip();
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // write register sip
  71:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     enum BitMaskSstatus
  74:src/../h/riscv.hpp ****     {
  75:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  76:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  77:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  78:src/../h/riscv.hpp ****     };
  79:src/../h/riscv.hpp **** 
  80:src/../h/riscv.hpp ****     // mask set register sstatus
  81:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  82:src/../h/riscv.hpp **** 
  83:src/../h/riscv.hpp ****     // mask clear register sstatus
  84:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     // read register sstatus
  87:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp ****     // write register sstatus
  90:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
GAS LISTING /tmp/ccRfXiBo.s 			page 4


  91:src/../h/riscv.hpp **** 
  92:src/../h/riscv.hpp ****     // mask set register sie
  93:src/../h/riscv.hpp ****     static void ms_sie(uint64 mask);
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp ****     // mask clear register sie
  96:src/../h/riscv.hpp ****     static void mc_sie(uint64 mask);
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp ****     static void supervisorTrap();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp ****     static long r_a0();
 101:src/../h/riscv.hpp **** 
 102:src/../h/riscv.hpp ****     static void w_a0(long a0);
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp ****     static uint64 r_a1();
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp ****     static void w_a1(uint64 a1);
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp ****     static uint64 r_a2();
 109:src/../h/riscv.hpp **** 
 110:src/../h/riscv.hpp ****     static void w_a2(uint64 a1);
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp ****     static uint64 r_a3();
 113:src/../h/riscv.hpp **** 
 114:src/../h/riscv.hpp ****     static void w_a3(uint64 a1);
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp ****     static void push_a0(long a0);
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** private:
 119:src/../h/riscv.hpp ****     static void trapHandler();
 120:src/../h/riscv.hpp **** 
 121:src/../h/riscv.hpp **** 
 122:src/../h/riscv.hpp **** };
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 125:src/../h/riscv.hpp **** {
 126:src/../h/riscv.hpp ****     uint64 volatile scause;
  73              		.loc 2 126 5
 127:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  74              		.loc 2 127 5
  75              		.loc 2 127 72 is_stmt 0
  76              	#APP
  77              	# 127 "src/../h/riscv.hpp" 1
 128              	    return scause;
  78              		csrr a5, scause
  79              	# 0 "" 2
  80              	#NO_APP
  81 004c 2334F4FA 		sd	a5,-88(s0)
  82              		.loc 2 128 5 is_stmt 1
  83              		.loc 2 128 12 is_stmt 0
  84 0050 033784FA 		ld	a4,-88(s0)
  85              	.LVL0:
  86              	.LBE55:
  87              	.LBE54:
  13:src/riscv.cpp ****     uint64 a0 = r_a0();
  88              		.loc 1 13 5 is_stmt 1
  89              	.LBB56:
  90              	.LBB57:
GAS LISTING /tmp/ccRfXiBo.s 			page 5


 129:src/../h/riscv.hpp **** }
 130:src/../h/riscv.hpp **** 
 131:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 132:src/../h/riscv.hpp **** {
 133:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 137:src/../h/riscv.hpp **** {
 138:src/../h/riscv.hpp ****     uint64 volatile sepc;
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 140:src/../h/riscv.hpp ****     return sepc;
 141:src/../h/riscv.hpp **** }
 142:src/../h/riscv.hpp **** 
 143:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 144:src/../h/riscv.hpp **** {
 145:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 146:src/../h/riscv.hpp **** }
 147:src/../h/riscv.hpp **** 
 148:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 149:src/../h/riscv.hpp **** {
 150:src/../h/riscv.hpp ****     uint64 volatile stvec;
 151:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 152:src/../h/riscv.hpp ****     return stvec;
 153:src/../h/riscv.hpp **** }
 154:src/../h/riscv.hpp **** 
 155:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 156:src/../h/riscv.hpp **** {
 157:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 158:src/../h/riscv.hpp **** }
 159:src/../h/riscv.hpp **** 
 160:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 161:src/../h/riscv.hpp **** {
 162:src/../h/riscv.hpp ****     uint64 volatile stval;
 163:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 164:src/../h/riscv.hpp ****     return stval;
 165:src/../h/riscv.hpp **** }
 166:src/../h/riscv.hpp **** 
 167:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 168:src/../h/riscv.hpp **** {
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 170:src/../h/riscv.hpp **** }
 171:src/../h/riscv.hpp **** 
 172:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 173:src/../h/riscv.hpp **** {
 174:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 175:src/../h/riscv.hpp **** }
 176:src/../h/riscv.hpp **** 
 177:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 178:src/../h/riscv.hpp **** {
 179:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 180:src/../h/riscv.hpp **** }
 181:src/../h/riscv.hpp **** 
 182:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 183:src/../h/riscv.hpp **** {
 184:src/../h/riscv.hpp ****     uint64 volatile sip;
 185:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
GAS LISTING /tmp/ccRfXiBo.s 			page 6


 186:src/../h/riscv.hpp ****     return sip;
 187:src/../h/riscv.hpp **** }
 188:src/../h/riscv.hpp **** 
 189:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 190:src/../h/riscv.hpp **** {
 191:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 192:src/../h/riscv.hpp **** }
 193:src/../h/riscv.hpp **** 
 194:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 195:src/../h/riscv.hpp **** {
 196:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 197:src/../h/riscv.hpp **** }
 198:src/../h/riscv.hpp **** 
 199:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 200:src/../h/riscv.hpp **** {
 201:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 202:src/../h/riscv.hpp **** }
 203:src/../h/riscv.hpp **** 
 204:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 205:src/../h/riscv.hpp **** {
 206:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 207:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 208:src/../h/riscv.hpp ****     return sstatus;
 209:src/../h/riscv.hpp **** }
 210:src/../h/riscv.hpp **** 
 211:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 212:src/../h/riscv.hpp **** {
 213:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 214:src/../h/riscv.hpp **** }
 215:src/../h/riscv.hpp **** 
 216:src/../h/riscv.hpp **** inline void Riscv::ms_sie(uint64 mask)
 217:src/../h/riscv.hpp **** {
 218:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sie, %[mask]" : : [mask] "r"(mask));
 219:src/../h/riscv.hpp **** }
 220:src/../h/riscv.hpp **** 
 221:src/../h/riscv.hpp **** inline void Riscv::mc_sie(uint64 mask)
 222:src/../h/riscv.hpp **** {
 223:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sie, %[mask]" : : [mask] "r"(mask));
 224:src/../h/riscv.hpp **** }
 225:src/../h/riscv.hpp **** 
 226:src/../h/riscv.hpp **** inline long Riscv::r_a0() {
 227:src/../h/riscv.hpp ****     long volatile a0;
  91              		.loc 2 227 5
 228:src/../h/riscv.hpp ****     __asm__ volatile ("ld %0, 10*8(fp)" : "=r"(a0));
  92              		.loc 2 228 5
  93              		.loc 2 228 52 is_stmt 0
  94              	#APP
  95              	# 228 "src/../h/riscv.hpp" 1
 229              	    return a0;
  96              		ld a5, 10*8(fp)
  97              	# 0 "" 2
  98              	#NO_APP
  99 0058 2330F4FA 		sd	a5,-96(s0)
 100              		.loc 2 229 5 is_stmt 1
 101              		.loc 2 229 12 is_stmt 0
 102 005c 833704FA 		ld	a5,-96(s0)
 103              	.LVL1:
GAS LISTING /tmp/ccRfXiBo.s 			page 7


 104              	.LBE57:
 105              	.LBE56:
  14:src/riscv.cpp ****     uint64 a1 = r_a1();
 106              		.loc 1 14 5 is_stmt 1
 107              	.LBB58:
 108              	.LBB59:
 230:src/../h/riscv.hpp **** }
 231:src/../h/riscv.hpp **** 
 232:src/../h/riscv.hpp **** inline void Riscv::w_a0(long a0) {
 233:src/../h/riscv.hpp ****     __asm__ volatile ("mv a0, %0" : : "r"(a0));
 234:src/../h/riscv.hpp **** }
 235:src/../h/riscv.hpp **** 
 236:src/../h/riscv.hpp **** inline uint64 Riscv::r_a1() {
 237:src/../h/riscv.hpp ****     uint64 volatile a1;
 109              		.loc 2 237 5
 238:src/../h/riscv.hpp ****     __asm__ volatile ("ld %0, 11*8(fp)" : "=r"(a1));
 110              		.loc 2 238 5
 111              		.loc 2 238 52 is_stmt 0
 112              	#APP
 113              	# 238 "src/../h/riscv.hpp" 1
 239              	    return a1;
 114              		ld a3, 11*8(fp)
 115              	# 0 "" 2
 116              	#NO_APP
 117 0064 233CD4F8 		sd	a3,-104(s0)
 118              		.loc 2 239 5 is_stmt 1
 119              		.loc 2 239 12 is_stmt 0
 120 0068 833484F9 		ld	s1,-104(s0)
 121              	.LVL2:
 122              	.LBE59:
 123              	.LBE58:
  15:src/riscv.cpp ****     uint64 a2 = r_a2();
 124              		.loc 1 15 5 is_stmt 1
 125              	.LBB60:
 126              	.LBB61:
 240:src/../h/riscv.hpp **** }
 241:src/../h/riscv.hpp **** 
 242:src/../h/riscv.hpp **** inline void Riscv::w_a1(uint64 a1) {
 243:src/../h/riscv.hpp ****     __asm__ volatile ("mv a1, %0" : : "r"(a1));
 244:src/../h/riscv.hpp **** }
 245:src/../h/riscv.hpp **** 
 246:src/../h/riscv.hpp **** inline uint64 Riscv::r_a2() {
 247:src/../h/riscv.hpp ****     uint64 volatile a2;
 127              		.loc 2 247 5
 248:src/../h/riscv.hpp ****     __asm__ volatile ("ld %0, 12*8(fp)" : "=r"(a2));
 128              		.loc 2 248 5
 129              		.loc 2 248 52 is_stmt 0
 130              	#APP
 131              	# 248 "src/../h/riscv.hpp" 1
 249              	    return a2;
 132              		ld a3, 12*8(fp)
 133              	# 0 "" 2
 134              	#NO_APP
 135 0070 2338D4F8 		sd	a3,-112(s0)
 136              		.loc 2 249 5 is_stmt 1
 137              		.loc 2 249 12 is_stmt 0
 138 0074 833904F9 		ld	s3,-112(s0)
GAS LISTING /tmp/ccRfXiBo.s 			page 8


 139              	.LVL3:
 140              	.LBE61:
 141              	.LBE60:
  16:src/riscv.cpp ****     uint64 a3 = r_a3();
 142              		.loc 1 16 5 is_stmt 1
 143              	.LBB62:
 144              	.LBB63:
 250:src/../h/riscv.hpp **** }
 251:src/../h/riscv.hpp **** 
 252:src/../h/riscv.hpp **** inline void Riscv::w_a2(uint64 a2) {
 253:src/../h/riscv.hpp ****     __asm__ volatile ("mv a2, %0" : : "r"(a2));
 254:src/../h/riscv.hpp **** }
 255:src/../h/riscv.hpp **** 
 256:src/../h/riscv.hpp **** inline uint64 Riscv::r_a3() {
 257:src/../h/riscv.hpp ****     uint64 volatile a3;
 145              		.loc 2 257 5
 258:src/../h/riscv.hpp ****     __asm__ volatile ("ld %0, 13*8(fp)" : "=r"(a3));
 146              		.loc 2 258 5
 147              		.loc 2 258 52 is_stmt 0
 148              	#APP
 149              	# 258 "src/../h/riscv.hpp" 1
 259              	    return a3;
 150              		ld a3, 13*8(fp)
 151              	# 0 "" 2
 152              	#NO_APP
 153 007c 2334D4F8 		sd	a3,-120(s0)
 154              		.loc 2 259 5 is_stmt 1
 155              		.loc 2 259 12 is_stmt 0
 156 0080 033984F8 		ld	s2,-120(s0)
 157              	.LVL4:
 158              	.LBE63:
 159              	.LBE62:
  17:src/riscv.cpp **** 
  18:src/riscv.cpp ****     uint64 sepc;
 160              		.loc 1 18 5 is_stmt 1
  19:src/riscv.cpp ****     uint64 sstatus;
 161              		.loc 1 19 5
  20:src/riscv.cpp **** 
  21:src/riscv.cpp ****     switch (scause) {
 162              		.loc 1 21 5
 163              	.LBB64:
 164 0084 9306F0FF 		li	a3,-1
 165 0088 9396F603 		slli	a3,a3,63
 166 008c 93861600 		addi	a3,a3,1
 167 0090 6308D71A 		beq	a4,a3,.L4
 168 0094 9306F0FF 		li	a3,-1
 169 0098 9396F603 		slli	a3,a3,63
 170 009c 93861600 		addi	a3,a3,1
 171 00a0 63EEE604 		bgtu	a4,a3,.L5
 172 00a4 130787FF 		addi	a4,a4,-8
 173              	.LVL5:
 174 00a8 93061000 		li	a3,1
 175 00ac 63EEE618 		bgtu	a4,a3,.L3
 176              	.LBB65:
  22:src/riscv.cpp ****         case 0x08:
 177              		.loc 1 22 9
  23:src/riscv.cpp ****         case 0x09:
GAS LISTING /tmp/ccRfXiBo.s 			page 9


 178              		.loc 1 23 9
  24:src/riscv.cpp ****             //ecall: software interrupt
  25:src/riscv.cpp ****             sepc = r_sepc() + 4;
 179              		.loc 1 25 13
 180              	.LBB66:
 181              	.LBB67:
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 182              		.loc 2 138 5
 139:src/../h/riscv.hpp ****     return sepc;
 183              		.loc 2 139 5
 139:src/../h/riscv.hpp ****     return sepc;
 184              		.loc 2 139 64 is_stmt 0
 185              	#APP
 186              	# 139 "src/../h/riscv.hpp" 1
 187              		csrr a4, sepc
 188              	# 0 "" 2
 189              	.LVL6:
 190              	#NO_APP
 191 00b4 233CE4FA 		sd	a4,-72(s0)
 140:src/../h/riscv.hpp **** }
 192              		.loc 2 140 5 is_stmt 1
 140:src/../h/riscv.hpp **** }
 193              		.loc 2 140 12 is_stmt 0
 194 00b8 033784FB 		ld	a4,-72(s0)
 195              	.LBE67:
 196              	.LBE66:
 197              		.loc 1 25 18
 198 00bc 930A4700 		addi	s5,a4,4
 199              	.LVL7:
  26:src/riscv.cpp ****             sstatus = r_sstatus();
 200              		.loc 1 26 13 is_stmt 1
 201              	.LBB68:
 202              	.LBB69:
 206:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 203              		.loc 2 206 5
 207:src/../h/riscv.hpp ****     return sstatus;
 204              		.loc 2 207 5
 207:src/../h/riscv.hpp ****     return sstatus;
 205              		.loc 2 207 76 is_stmt 0
 206              	#APP
 207              	# 207 "src/../h/riscv.hpp" 1
 208              		csrr a3, sstatus
 209              	# 0 "" 2
 210              	#NO_APP
 211 00c4 2338D4FA 		sd	a3,-80(s0)
 208:src/../h/riscv.hpp **** }
 212              		.loc 2 208 5 is_stmt 1
 208:src/../h/riscv.hpp **** }
 213              		.loc 2 208 12 is_stmt 0
 214 00c8 033A04FB 		ld	s4,-80(s0)
 215              	.LVL8:
 216              	.LBE69:
 217              	.LBE68:
  27:src/riscv.cpp ****             void* mem;
 218              		.loc 1 27 13 is_stmt 1
  28:src/riscv.cpp ****             uint64* stack;
 219              		.loc 1 28 13
GAS LISTING /tmp/ccRfXiBo.s 			page 10


  29:src/riscv.cpp ****             PCB** handle;
 220              		.loc 1 29 13
  30:src/riscv.cpp ****             switch(a0){
 221              		.loc 1 30 13
 222 00cc 93063001 		li	a3,19
 223 00d0 63C4F604 		bgt	a5,a3,.L9
 224 00d4 635AF008 		blez	a5,.L10
 225 00d8 13073001 		li	a4,19
 226 00dc 6366F708 		bgtu	a5,a4,.L10
 227 00e0 93972700 		slli	a5,a5,2
 228              	.LVL9:
 229 00e4 17070000 		lla	a4,.L12
 229      13070700 
 230 00ec B387E700 		add	a5,a5,a4
 231 00f0 83A70700 		lw	a5,0(a5)
 232 00f4 B387E700 		add	a5,a5,a4
 233 00f8 67800700 		jr	a5
 234              		.section	.rodata
 235              		.align	2
 236              		.align	2
 237              	.L12:
 238 0000 00000000 		.word	.L10-.L12
 239 0004 00000000 		.word	.L16-.L12
 240 0008 00000000 		.word	.L15-.L12
 241 000c 00000000 		.word	.L10-.L12
 242 0010 00000000 		.word	.L10-.L12
 243 0014 00000000 		.word	.L10-.L12
 244 0018 00000000 		.word	.L10-.L12
 245 001c 00000000 		.word	.L10-.L12
 246 0020 00000000 		.word	.L10-.L12
 247 0024 00000000 		.word	.L10-.L12
 248 0028 00000000 		.word	.L10-.L12
 249 002c 00000000 		.word	.L10-.L12
 250 0030 00000000 		.word	.L10-.L12
 251 0034 00000000 		.word	.L10-.L12
 252 0038 00000000 		.word	.L10-.L12
 253 003c 00000000 		.word	.L10-.L12
 254 0040 00000000 		.word	.L10-.L12
 255 0044 00000000 		.word	.L14-.L12
 256 0048 00000000 		.word	.L13-.L12
 257 004c 00000000 		.word	.L11-.L12
 258              		.text
 259              	.LVL10:
 260              	.L5:
 261              	.LBE65:
  21:src/riscv.cpp ****         case 0x08:
 262              		.loc 1 21 5 is_stmt 0
 263 00fc 9307F0FF 		li	a5,-1
 264              	.LVL11:
 265 0100 9397F703 		slli	a5,a5,63
 266 0104 93879700 		addi	a5,a5,9
 267 0108 6310F714 		bne	a4,a5,.L3
 268              	.LBB102:
  31:src/riscv.cpp ****                 case 0x01: // allocate
  32:src/riscv.cpp ****                     mem = MemoryAllocator::getInstance().allocate((size_t) a1);
  33:src/riscv.cpp ****                     push_a0((uint64) mem);
  34:src/riscv.cpp ****                     break;
GAS LISTING /tmp/ccRfXiBo.s 			page 11


  35:src/riscv.cpp ****                 case 0x02: // deallocate
  36:src/riscv.cpp ****                     push_a0(MemoryAllocator::getInstance().deallocate((void *)a1));
  37:src/riscv.cpp ****                     break;
  38:src/riscv.cpp ****                 case 0x11: //thread_create
  39:src/riscv.cpp ****                     if((uint64*)a1!= nullptr) stack = (uint64*)MemoryAllocator::getInstance().alloc
  40:src/riscv.cpp ****                     else stack = nullptr;
  41:src/riscv.cpp ****                     handle = (PCB**) a3;
  42:src/riscv.cpp ****                     *handle = new PCB((PCB::Body)a1, (void*)a2, stack);
  43:src/riscv.cpp ****                     //if(!handle)push_a0(-1);
  44:src/riscv.cpp **** 
  45:src/riscv.cpp ****                     push_a0(0);
  46:src/riscv.cpp **** 
  47:src/riscv.cpp **** 
  48:src/riscv.cpp ****                     break;
  49:src/riscv.cpp ****                 case 0x12: // thread_exit
  50:src/riscv.cpp ****                     push_a0(PCB::exit());
  51:src/riscv.cpp ****                     break;
  52:src/riscv.cpp ****                 case 0x13:
  53:src/riscv.cpp ****                     PCB::dispatch();
  54:src/riscv.cpp ****                     break;
  55:src/riscv.cpp ****                 case 0x14:
  56:src/riscv.cpp ****                     break;
  57:src/riscv.cpp ****                 case 0x51:
  58:src/riscv.cpp ****                     w_sstatus(sstatus);
  59:src/riscv.cpp ****                     mc_sstatus(1<<8);
  60:src/riscv.cpp ****                     w_sepc(sepc+4);
  61:src/riscv.cpp ****                     mc_sip(SIP_SSIP);
  62:src/riscv.cpp ****                     return;
  63:src/riscv.cpp ****                 default:
  64:src/riscv.cpp ****                     //printString("Unknown interrupt!");
  65:src/riscv.cpp ****                     break;
  66:src/riscv.cpp **** 
  67:src/riscv.cpp ****             }
  68:src/riscv.cpp **** 
  69:src/riscv.cpp ****             w_sstatus(sstatus);
  70:src/riscv.cpp ****             w_sepc(sepc);
  71:src/riscv.cpp ****             //mc_sip(SIP_SSIP); remove this comment later and see if it works
  72:src/riscv.cpp ****             break;
  73:src/riscv.cpp ****         case 0x8000000000000001UL:
  74:src/riscv.cpp ****             //timer interrupt
  75:src/riscv.cpp ****             mc_sip(SIP_SSIP);
  76:src/riscv.cpp ****             break;
  77:src/riscv.cpp ****         case 0x8000000000000009UL:
 269              		.loc 1 77 9 is_stmt 1
  78:src/riscv.cpp ****             //external hardware interrupt
  79:src/riscv.cpp ****             console_handler();
 270              		.loc 1 79 13
 271              		.loc 1 79 28 is_stmt 0
 272 010c 97000000 		call	console_handler@plt
 272      E7800000 
 273              	.LVL12:
  80:src/riscv.cpp ****             break;
 274              		.loc 1 80 13 is_stmt 1
 275 0114 6F004013 		j	.L3
 276              	.LVL13:
 277              	.L9:
 278 0118 93061005 		li	a3,81
GAS LISTING /tmp/ccRfXiBo.s 			page 12


 279 011c 6396D704 		bne	a5,a3,.L10
  57:src/riscv.cpp ****                     w_sstatus(sstatus);
 280              		.loc 1 57 17
  58:src/riscv.cpp ****                     mc_sstatus(1<<8);
 281              		.loc 1 58 21
 282              	.LVL14:
 283              	.LBB70:
 284              	.LBB71:
 213:src/../h/riscv.hpp **** }
 285              		.loc 2 213 5
 213:src/../h/riscv.hpp **** }
 286              		.loc 2 213 77 is_stmt 0
 287              	#APP
 288              	# 213 "src/../h/riscv.hpp" 1
 289              		csrw sstatus, s4
 290              	# 0 "" 2
 291              	.LVL15:
 292              	#NO_APP
 293              	.LBE71:
 294              	.LBE70:
  59:src/riscv.cpp ****                     w_sepc(sepc+4);
 295              		.loc 1 59 21 is_stmt 1
 296              	.LBB72:
 297              	.LBB73:
 201:src/../h/riscv.hpp **** }
 298              		.loc 2 201 5
 201:src/../h/riscv.hpp **** }
 299              		.loc 2 201 68 is_stmt 0
 300 0124 93070010 		li	a5,256
 301              	.LVL16:
 302              	#APP
 303              	# 201 "src/../h/riscv.hpp" 1
 304              		csrc sstatus, a5
 305              	# 0 "" 2
 306              	.LVL17:
 307              	#NO_APP
 308              	.LBE73:
 309              	.LBE72:
  60:src/riscv.cpp ****                     mc_sip(SIP_SSIP);
 310              		.loc 1 60 21 is_stmt 1
  60:src/riscv.cpp ****                     mc_sip(SIP_SSIP);
 311              		.loc 1 60 27 is_stmt 0
 312 012c 13078700 		addi	a4,a4,8
 313              	.LVL18:
 314              	.LBB74:
 315              	.LBB75:
 145:src/../h/riscv.hpp **** }
 316              		.loc 2 145 5 is_stmt 1
 145:src/../h/riscv.hpp **** }
 317              		.loc 2 145 65 is_stmt 0
 318              	#APP
 319              	# 145 "src/../h/riscv.hpp" 1
 320              		csrw sepc, a4
 321              	# 0 "" 2
 322              	.LVL19:
 323              	#NO_APP
 324              	.LBE75:
GAS LISTING /tmp/ccRfXiBo.s 			page 13


 325              	.LBE74:
  61:src/riscv.cpp ****                     return;
 326              		.loc 1 61 21 is_stmt 1
 327              	.LBB76:
 328              	.LBB77:
 179:src/../h/riscv.hpp **** }
 329              		.loc 2 179 5
 179:src/../h/riscv.hpp **** }
 330              		.loc 2 179 64 is_stmt 0
 331 0134 93072000 		li	a5,2
 332              	#APP
 333              	# 179 "src/../h/riscv.hpp" 1
 180:src/../h/riscv.hpp **** 
 334              		csrc sip, a5
 335              	# 0 "" 2
 336              		.loc 2 180 1
 337              	#NO_APP
 338 013c 6F00C010 		j	.L3
 339              	.LVL20:
 340              	.L16:
 341              	.LBE77:
 342              	.LBE76:
  31:src/riscv.cpp ****                     mem = MemoryAllocator::getInstance().allocate((size_t) a1);
 343              		.loc 1 31 17 is_stmt 1
  32:src/riscv.cpp ****                     push_a0((uint64) mem);
 344              		.loc 1 32 21
 345              	.LBB78:
 346              	.LBB79:
 347              		.file 3 "src/../h/../h/MemoryAllocator.hpp"
   1:src/../h/../h/MemoryAllocator.hpp **** #ifndef PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   2:src/../h/../h/MemoryAllocator.hpp **** #define PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   3:src/../h/../h/MemoryAllocator.hpp **** #include "print.hpp"
   4:src/../h/../h/MemoryAllocator.hpp **** 
   5:src/../h/../h/MemoryAllocator.hpp **** struct Block {
   6:src/../h/../h/MemoryAllocator.hpp ****     size_t size;
   7:src/../h/../h/MemoryAllocator.hpp ****     Block *next;
   8:src/../h/../h/MemoryAllocator.hpp **** };
   9:src/../h/../h/MemoryAllocator.hpp **** 
  10:src/../h/../h/MemoryAllocator.hpp **** class MemoryAllocator {
  11:src/../h/../h/MemoryAllocator.hpp **** 
  12:src/../h/../h/MemoryAllocator.hpp **** private:
  13:src/../h/../h/MemoryAllocator.hpp **** 
  14:src/../h/../h/MemoryAllocator.hpp **** 
  15:src/../h/../h/MemoryAllocator.hpp ****     MemoryAllocator() {}
  16:src/../h/../h/MemoryAllocator.hpp **** 
  17:src/../h/../h/MemoryAllocator.hpp ****     static Block *free_list;
  18:src/../h/../h/MemoryAllocator.hpp ****     static Block *allocated_list;
  19:src/../h/../h/MemoryAllocator.hpp **** 
  20:src/../h/../h/MemoryAllocator.hpp **** 
  21:src/../h/../h/MemoryAllocator.hpp **** public:
  22:src/../h/../h/MemoryAllocator.hpp **** 
  23:src/../h/../h/MemoryAllocator.hpp **** 
  24:src/../h/../h/MemoryAllocator.hpp ****     // Get the singleton instance
  25:src/../h/../h/MemoryAllocator.hpp ****     static MemoryAllocator &getInstance() {
  26:src/../h/../h/MemoryAllocator.hpp ****         static MemoryAllocator instance;
 348              		.loc 3 26 9
 349              		.loc 3 26 32 is_stmt 0
GAS LISTING /tmp/ccRfXiBo.s 			page 14


 350 0140 97070000 		lbu	a5,_ZGVZN15MemoryAllocator11getInstanceEvE8instance
 350      83C70700 
 351 0148 63980700 		bnez	a5,.L18
 352              	.LVL21:
 353 014c 93071000 		li	a5,1
 354 0150 17070000 		sb	a5,_ZGVZN15MemoryAllocator11getInstanceEvE8instance,a4
 354      2300F700 
 355              	.LVL22:
 356              	.L18:
  27:src/../h/../h/MemoryAllocator.hpp ****         return instance;
 357              		.loc 3 27 9 is_stmt 1
 358              	.LBE79:
 359              	.LBE78:
  32:src/riscv.cpp ****                     push_a0((uint64) mem);
 360              		.loc 1 32 78 is_stmt 0
 361 0158 13850400 		mv	a0,s1
 362 015c 97000000 		call	_ZN15MemoryAllocator8allocateEm@plt
 362      E7800000 
 363              	.LVL23:
  33:src/riscv.cpp ****                     break;
 364              		.loc 1 33 21 is_stmt 1
 365              	.LBB80:
 366              	.LBB81:
 260:src/../h/riscv.hpp **** }
 261:src/../h/riscv.hpp **** 
 262:src/../h/riscv.hpp **** inline void Riscv::w_a3(uint64 a3) {
 263:src/../h/riscv.hpp ****     __asm__ volatile ("mv a3, %0" : : "r"(a3));
 264:src/../h/riscv.hpp **** }
 265:src/../h/riscv.hpp **** 
 266:src/../h/riscv.hpp **** inline void Riscv::push_a0(long a0) {
 267:src/../h/riscv.hpp ****     __asm__ volatile ("sd %0, 10*8(fp)" : : "r"(a0));
 367              		.loc 2 267 5
 368              		.loc 2 267 53 is_stmt 0
 369              	#APP
 370              	# 267 "src/../h/riscv.hpp" 1
 268              	}
 371              		sd a0, 10*8(fp)
 372              	# 0 "" 2
 373              	.LVL24:
 374              	#NO_APP
 375              	.L10:
 376              	.LBE81:
 377              	.LBE80:
  69:src/riscv.cpp ****             w_sepc(sepc);
 378              		.loc 1 69 13 is_stmt 1
 379              	.LBB82:
 380              	.LBB83:
 213:src/../h/riscv.hpp **** }
 381              		.loc 2 213 5
 213:src/../h/riscv.hpp **** }
 382              		.loc 2 213 77 is_stmt 0
 383              	#APP
 384              	# 213 "src/../h/riscv.hpp" 1
 385              		csrw sstatus, s4
 386              	# 0 "" 2
 387              	.LVL25:
 388              	#NO_APP
GAS LISTING /tmp/ccRfXiBo.s 			page 15


 389              	.LBE83:
 390              	.LBE82:
  70:src/riscv.cpp ****             //mc_sip(SIP_SSIP); remove this comment later and see if it works
 391              		.loc 1 70 13 is_stmt 1
 392              	.LBB84:
 393              	.LBB85:
 145:src/../h/riscv.hpp **** }
 394              		.loc 2 145 5
 145:src/../h/riscv.hpp **** }
 395              		.loc 2 145 65 is_stmt 0
 396              	#APP
 397              	# 145 "src/../h/riscv.hpp" 1
 146:src/../h/riscv.hpp **** 
 398              		csrw sepc, s5
 399              	# 0 "" 2
 400              		.loc 2 146 1
 401              	#NO_APP
 402 0170 6F00800D 		j	.L3
 403              	.LVL26:
 404              	.L15:
 405              	.LBE85:
 406              	.LBE84:
  35:src/riscv.cpp ****                     push_a0(MemoryAllocator::getInstance().deallocate((void *)a1));
 407              		.loc 1 35 17 is_stmt 1
  36:src/riscv.cpp ****                     break;
 408              		.loc 1 36 21
 409              	.LBB86:
 410              	.LBB87:
  26:src/../h/../h/MemoryAllocator.hpp ****         return instance;
 411              		.loc 3 26 9
  26:src/../h/../h/MemoryAllocator.hpp ****         return instance;
 412              		.loc 3 26 32 is_stmt 0
 413 0174 97070000 		lbu	a5,_ZGVZN15MemoryAllocator11getInstanceEvE8instance
 413      83C70700 
 414 017c 63980700 		bnez	a5,.L19
 415              	.LVL27:
 416 0180 93071000 		li	a5,1
 417 0184 17070000 		sb	a5,_ZGVZN15MemoryAllocator11getInstanceEvE8instance,a4
 417      2300F700 
 418              	.LVL28:
 419              	.L19:
 420              		.loc 3 27 9 is_stmt 1
 421              	.LBE87:
 422              	.LBE86:
  36:src/riscv.cpp ****                     break;
 423              		.loc 1 36 81 is_stmt 0
 424 018c 13850400 		mv	a0,s1
 425 0190 97000000 		call	_ZN15MemoryAllocator10deallocateEPv@plt
 425      E7800000 
 426              	.LVL29:
 427              	.LBB88:
 428              	.LBB89:
 267:src/../h/riscv.hpp **** }
 429              		.loc 2 267 5 is_stmt 1
 267:src/../h/riscv.hpp **** }
 430              		.loc 2 267 53 is_stmt 0
 431              	#APP
GAS LISTING /tmp/ccRfXiBo.s 			page 16


 432              	# 267 "src/../h/riscv.hpp" 1
 433              		sd a0, 10*8(fp)
 434              	# 0 "" 2
 435              		.loc 2 268 1
 436              	#NO_APP
 437 019c 6FF0DFFC 		j	.L10
 438              	.LVL30:
 439              	.L14:
 440              	.LBE89:
 441              	.LBE88:
  38:src/riscv.cpp ****                     if((uint64*)a1!= nullptr) stack = (uint64*)MemoryAllocator::getInstance().alloc
 442              		.loc 1 38 17 is_stmt 1
  39:src/riscv.cpp ****                     else stack = nullptr;
 443              		.loc 1 39 21
 444 01a0 638A0406 		beqz	s1,.L23
  39:src/riscv.cpp ****                     else stack = nullptr;
 445              		.loc 1 39 47
 446              	.LBB90:
 447              	.LBB91:
  26:src/../h/../h/MemoryAllocator.hpp ****         return instance;
 448              		.loc 3 26 9
  26:src/../h/../h/MemoryAllocator.hpp ****         return instance;
 449              		.loc 3 26 32 is_stmt 0
 450 01a4 97070000 		lbu	a5,_ZGVZN15MemoryAllocator11getInstanceEvE8instance
 450      83C70700 
 451 01ac 63980700 		bnez	a5,.L21
 452              	.LVL31:
 453 01b0 93071000 		li	a5,1
 454 01b4 17070000 		sb	a5,_ZGVZN15MemoryAllocator11getInstanceEvE8instance,a4
 454      2300F700 
 455              	.LVL32:
 456              	.L21:
 457              		.loc 3 27 9 is_stmt 1
 458              	.LBE91:
 459              	.LBE90:
  39:src/riscv.cpp ****                     else stack = nullptr;
 460              		.loc 1 39 168 is_stmt 0
 461 01bc 13051004 		li	a0,65
 462 01c0 97000000 		call	_ZN15MemoryAllocator8allocateEm@plt
 462      E7800000 
 463              	.LVL33:
 464 01c8 130B0500 		mv	s6,a0
 465              	.LVL34:
 466              	.L20:
  41:src/riscv.cpp ****                     *handle = new PCB((PCB::Body)a1, (void*)a2, stack);
 467              		.loc 1 41 21 is_stmt 1
  42:src/riscv.cpp ****                     //if(!handle)push_a0(-1);
 468              		.loc 1 42 21
  42:src/riscv.cpp ****                     //if(!handle)push_a0(-1);
 469              		.loc 1 42 70 is_stmt 0
 470 01cc 13050003 		li	a0,48
 471 01d0 97000000 		call	_Znwm@plt
 471      E7800000 
 472              	.LVL35:
 473              	.LBB92:
 474              	.LBB93:
 475              		.file 4 "src/../h/PCB.hpp"
GAS LISTING /tmp/ccRfXiBo.s 			page 17


   1:src/../h/PCB.hpp **** #ifndef PROJECT_BASE_V1_1_PCB_HPP
   2:src/../h/PCB.hpp **** #define PROJECT_BASE_V1_1_PCB_HPP
   3:src/../h/PCB.hpp **** 
   4:src/../h/PCB.hpp **** 
   5:src/../h/PCB.hpp **** #include "Scheduler.hpp"
   6:src/../h/PCB.hpp **** #include "riscv.hpp"
   7:src/../h/PCB.hpp **** #include "../h/syscall_c.hpp"
   8:src/../h/PCB.hpp **** 
   9:src/../h/PCB.hpp **** 
  10:src/../h/PCB.hpp **** class PCB {
  11:src/../h/PCB.hpp **** public:
  12:src/../h/PCB.hpp ****     struct Context {
  13:src/../h/PCB.hpp ****         uint64 ra;
  14:src/../h/PCB.hpp ****         uint64 sp;
  15:src/../h/PCB.hpp ****     };
  16:src/../h/PCB.hpp **** 
  17:src/../h/PCB.hpp ****     enum State {
  18:src/../h/PCB.hpp ****         READY,
  19:src/../h/PCB.hpp ****         RUNNING,
  20:src/../h/PCB.hpp ****         SUSPENDED,
  21:src/../h/PCB.hpp ****         FINISHED
  22:src/../h/PCB.hpp ****     };
  23:src/../h/PCB.hpp **** 
  24:src/../h/PCB.hpp ****     ~PCB() { delete[] stack; }
  25:src/../h/PCB.hpp **** 
  26:src/../h/PCB.hpp ****     bool isFinished() const { return state == FINISHED; }
  27:src/../h/PCB.hpp **** 
  28:src/../h/PCB.hpp ****     void setState(State s) { state = s; }
  29:src/../h/PCB.hpp **** 
  30:src/../h/PCB.hpp ****     using Body = void (*)(void *);
  31:src/../h/PCB.hpp **** 
  32:src/../h/PCB.hpp **** 
  33:src/../h/PCB.hpp ****     static void dispatch();
  34:src/../h/PCB.hpp **** 
  35:src/../h/PCB.hpp ****     static int exit();
  36:src/../h/PCB.hpp **** 
  37:src/../h/PCB.hpp **** 
  38:src/../h/PCB.hpp ****     static PCB *running;
  39:src/../h/PCB.hpp **** 
  40:src/../h/PCB.hpp **** private:
  41:src/../h/PCB.hpp **** 
  42:src/../h/PCB.hpp ****     static void contextSwitch(Context *old, Context *running);
  43:src/../h/PCB.hpp **** 
  44:src/../h/PCB.hpp ****     static void wrapper();
  45:src/../h/PCB.hpp **** 
  46:src/../h/PCB.hpp **** public:
  47:src/../h/PCB.hpp ****     PCB(Body body, void *args, uint64 *stack) {
  48:src/../h/PCB.hpp ****         this->body = body;
 476              		.loc 4 48 9 is_stmt 1
 477              		.loc 4 48 20 is_stmt 0
 478 01d8 23309500 		sd	s1,0(a0)
  49:src/../h/PCB.hpp ****         this->stack = stack;
 479              		.loc 4 49 9 is_stmt 1
 480              		.loc 4 49 21 is_stmt 0
 481 01dc 23346501 		sd	s6,8(a0)
  50:src/../h/PCB.hpp ****         context = {(uint64) &wrapper,
 482              		.loc 4 50 9 is_stmt 1
GAS LISTING /tmp/ccRfXiBo.s 			page 18


  51:src/../h/PCB.hpp ****                    stack != nullptr ? (uint64) &stack[DEFAULT_STACK_SIZE] : 0
 483              		.loc 4 51 37 is_stmt 0
 484 01e0 630E0B02 		beqz	s6,.L24
 485              		.loc 4 51 48
 486 01e4 B7870000 		li	a5,32768
 487 01e8 330BFB00 		add	s6,s6,a5
 488              	.LVL36:
 489              	.L22:
  50:src/../h/PCB.hpp ****         context = {(uint64) &wrapper,
 490              		.loc 4 50 17
 491 01ec 97070000 		la	a5,_ZN3PCB7wrapperEv
 491      83B70700 
 492 01f4 233CF500 		sd	a5,24(a0)
 493 01f8 23306503 		sd	s6,32(a0)
  52:src/../h/PCB.hpp ****         };
  53:src/../h/PCB.hpp ****         this->args = args;
 494              		.loc 4 53 9 is_stmt 1
 495              		.loc 4 53 20 is_stmt 0
 496 01fc 23383501 		sd	s3,16(a0)
  54:src/../h/PCB.hpp ****         state = READY;
 497              		.loc 4 54 9 is_stmt 1
 498              		.loc 4 54 15 is_stmt 0
 499 0200 23240502 		sw	zero,40(a0)
 500              	.LVL37:
 501              	.LBE93:
 502              	.LBE92:
  42:src/riscv.cpp ****                     //if(!handle)push_a0(-1);
 503              		.loc 1 42 29
 504 0204 2330A900 		sd	a0,0(s2)
 505              	.LVL38:
  45:src/riscv.cpp **** 
 506              		.loc 1 45 21 is_stmt 1
 507              	.LBB95:
 508              	.LBB96:
 267:src/../h/riscv.hpp **** }
 509              		.loc 2 267 5
 267:src/../h/riscv.hpp **** }
 510              		.loc 2 267 53 is_stmt 0
 511 0208 93070000 		li	a5,0
 512              	#APP
 513              	# 267 "src/../h/riscv.hpp" 1
 514              		sd a5, 10*8(fp)
 515              	# 0 "" 2
 516              		.loc 2 268 1
 517              	#NO_APP
 518 0210 6FF09FF5 		j	.L10
 519              	.LVL39:
 520              	.L23:
 521              	.LBE96:
 522              	.LBE95:
  40:src/riscv.cpp ****                     handle = (PCB**) a3;
 523              		.loc 1 40 32
 524 0214 130B0000 		li	s6,0
 525 0218 6FF05FFB 		j	.L20
 526              	.LVL40:
 527              	.L24:
 528              	.LBB97:
GAS LISTING /tmp/ccRfXiBo.s 			page 19


 529              	.LBB94:
  51:src/../h/PCB.hpp ****         };
 530              		.loc 4 51 37
 531 021c 130B0000 		li	s6,0
 532              	.LVL41:
 533 0220 6FF0DFFC 		j	.L22
 534              	.LVL42:
 535              	.L13:
 536              	.LBE94:
 537              	.LBE97:
  49:src/riscv.cpp ****                     push_a0(PCB::exit());
 538              		.loc 1 49 17 is_stmt 1
  50:src/riscv.cpp ****                     break;
 539              		.loc 1 50 21
  50:src/riscv.cpp ****                     break;
 540              		.loc 1 50 38 is_stmt 0
 541 0224 97000000 		call	_ZN3PCB4exitEv@plt
 541      E7800000 
 542              	.LVL43:
 543              	.LBB98:
 544              	.LBB99:
 267:src/../h/riscv.hpp **** }
 545              		.loc 2 267 5 is_stmt 1
 267:src/../h/riscv.hpp **** }
 546              		.loc 2 267 53 is_stmt 0
 547              	#APP
 548              	# 267 "src/../h/riscv.hpp" 1
 549              		sd a0, 10*8(fp)
 550              	# 0 "" 2
 551              		.loc 2 268 1
 552              	#NO_APP
 553 0230 6FF09FF3 		j	.L10
 554              	.LVL44:
 555              	.L11:
 556              	.LBE99:
 557              	.LBE98:
  52:src/riscv.cpp ****                     PCB::dispatch();
 558              		.loc 1 52 17 is_stmt 1
  53:src/riscv.cpp ****                     break;
 559              		.loc 1 53 21
  53:src/riscv.cpp ****                     break;
 560              		.loc 1 53 34 is_stmt 0
 561 0234 97000000 		call	_ZN3PCB8dispatchEv@plt
 561      E7800000 
 562              	.LVL45:
  54:src/riscv.cpp ****                 case 0x14:
 563              		.loc 1 54 21 is_stmt 1
 564 023c 6FF0DFF2 		j	.L10
 565              	.LVL46:
 566              	.L4:
  73:src/riscv.cpp ****             //timer interrupt
 567              		.loc 1 73 9
  75:src/riscv.cpp ****             break;
 568              		.loc 1 75 13
 569              	.LBB100:
 570              	.LBB101:
 179:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccRfXiBo.s 			page 20


 571              		.loc 2 179 5
 179:src/../h/riscv.hpp **** }
 572              		.loc 2 179 64 is_stmt 0
 573 0240 93072000 		li	a5,2
 574              	.LVL47:
 575              	#APP
 576              	# 179 "src/../h/riscv.hpp" 1
 577              		csrc sip, a5
 578              	# 0 "" 2
 579              	.LVL48:
 580              	#NO_APP
 581              	.L3:
 582              	.LBE101:
 583              	.LBE100:
 584              	.LBE102:
 585              	.LBE64:
  81:src/riscv.cpp ****         default:
  82:src/riscv.cpp ****             return;
  83:src/riscv.cpp ****             //printString("ERROR: Unexpected interrupt!");
  84:src/riscv.cpp ****     }
  85:src/riscv.cpp **** 
  86:src/riscv.cpp **** }...
 586              		.loc 1 86 1
 587 0248 83308107 		ld	ra,120(sp)
 588              		.cfi_restore 1
 589 024c 03340107 		ld	s0,112(sp)
 590              		.cfi_restore 8
 591              		.cfi_def_cfa 2, 128
 592 0250 83348106 		ld	s1,104(sp)
 593              		.cfi_restore 9
 594              	.LVL49:
 595 0254 03390106 		ld	s2,96(sp)
 596              		.cfi_restore 18
 597              	.LVL50:
 598 0258 83398105 		ld	s3,88(sp)
 599              		.cfi_restore 19
 600              	.LVL51:
 601 025c 033A0105 		ld	s4,80(sp)
 602              		.cfi_restore 20
 603 0260 833A8104 		ld	s5,72(sp)
 604              		.cfi_restore 21
 605 0264 033B0104 		ld	s6,64(sp)
 606              		.cfi_restore 22
 607 0268 13010108 		addi	sp,sp,128
 608              		.cfi_def_cfa_offset 0
 609 026c 67800000 		jr	ra
 610              		.cfi_endproc
 611              	.LFE49:
 613              		.weak	_ZGVZN15MemoryAllocator11getInstanceEvE8instance
 614              		.section	.bss._ZGVZN15MemoryAllocator11getInstanceEvE8instance,"awG",@nobits,_ZGVZN15MemoryAllocat
 615              		.align	3
 618              	_ZGVZN15MemoryAllocator11getInstanceEvE8instance:
 619 0000 00000000 		.zero	8
 619      00000000 
 620              		.text
 621              	.Letext0:
 622              		.file 5 "src/../h/../h/../lib/hw.h"
GAS LISTING /tmp/ccRfXiBo.s 			page 21


 623              		.file 6 "src/../h/../h/../lib/console.h"
GAS LISTING /tmp/ccRfXiBo.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccRfXiBo.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccRfXiBo.s:13     .text:0000000000000000 .L0 
     /tmp/ccRfXiBo.s:14     .text:0000000000000000 .L0 
     /tmp/ccRfXiBo.s:15     .text:0000000000000004 .L0 
     /tmp/ccRfXiBo.s:17     .text:0000000000000008 .L0 
     /tmp/ccRfXiBo.s:19     .text:000000000000000c .L0 
     /tmp/ccRfXiBo.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:7      .text:000000000000000c .L0 
     /tmp/ccRfXiBo.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:8      .text:0000000000000010 .L0 
     /tmp/ccRfXiBo.s:33     .text:0000000000000014 .L0 
     /tmp/ccRfXiBo.s:34     .text:0000000000000018 .L0 
     /tmp/ccRfXiBo.s:35     .text:0000000000000018 .L0 
     /tmp/ccRfXiBo.s:37     .text:000000000000001c .L0 
     /tmp/ccRfXiBo.s:39     .text:0000000000000020 .L0 
     /tmp/ccRfXiBo.s:45     .text:0000000000000020 _ZN5Riscv11trapHandlerEv
     /tmp/ccRfXiBo.s:48     .text:0000000000000020 .L0 
     /tmp/ccRfXiBo.s:49     .text:0000000000000020 .L0 
     /tmp/ccRfXiBo.s:50     .text:0000000000000024 .L0 
     /tmp/ccRfXiBo.s:59     .text:0000000000000044 .L0 
     /tmp/ccRfXiBo.s:60     .text:0000000000000044 .L0 
     /tmp/ccRfXiBo.s:61     .text:0000000000000044 .L0 
     /tmp/ccRfXiBo.s:62     .text:0000000000000044 .L0 
     /tmp/ccRfXiBo.s:63     .text:0000000000000044 .L0 
     /tmp/ccRfXiBo.s:64     .text:0000000000000044 .L0 
     /tmp/ccRfXiBo.s:65     .text:0000000000000044 .L0 
     /tmp/ccRfXiBo.s:66     .text:0000000000000044 .L0 
     /tmp/ccRfXiBo.s:68     .text:0000000000000048 .L0 
     /tmp/ccRfXiBo.s:73     .text:0000000000000048 .L0 
     /tmp/ccRfXiBo.s:74     .text:0000000000000048 .L0 
     /tmp/ccRfXiBo.s:75     .text:0000000000000048 .L0 
  src/../h/riscv.hpp:127    .text:0000000000000048 .L0 
     /tmp/ccRfXiBo.s:83     .text:0000000000000050 .L0 
     /tmp/ccRfXiBo.s:84     .text:0000000000000050 .L0 
     /tmp/ccRfXiBo.s:91     .text:0000000000000054 .L0 
     /tmp/ccRfXiBo.s:92     .text:0000000000000054 .L0 
     /tmp/ccRfXiBo.s:93     .text:0000000000000054 .L0 
  src/../h/riscv.hpp:228    .text:0000000000000054 .L0 
     /tmp/ccRfXiBo.s:101    .text:000000000000005c .L0 
     /tmp/ccRfXiBo.s:102    .text:000000000000005c .L0 
     /tmp/ccRfXiBo.s:109    .text:0000000000000060 .L0 
     /tmp/ccRfXiBo.s:110    .text:0000000000000060 .L0 
     /tmp/ccRfXiBo.s:111    .text:0000000000000060 .L0 
  src/../h/riscv.hpp:238    .text:0000000000000060 .L0 
     /tmp/ccRfXiBo.s:119    .text:0000000000000068 .L0 
     /tmp/ccRfXiBo.s:120    .text:0000000000000068 .L0 
     /tmp/ccRfXiBo.s:127    .text:000000000000006c .L0 
     /tmp/ccRfXiBo.s:128    .text:000000000000006c .L0 
     /tmp/ccRfXiBo.s:129    .text:000000000000006c .L0 
  src/../h/riscv.hpp:248    .text:000000000000006c .L0 
     /tmp/ccRfXiBo.s:137    .text:0000000000000074 .L0 
     /tmp/ccRfXiBo.s:138    .text:0000000000000074 .L0 
     /tmp/ccRfXiBo.s:145    .text:0000000000000078 .L0 
     /tmp/ccRfXiBo.s:146    .text:0000000000000078 .L0 
     /tmp/ccRfXiBo.s:147    .text:0000000000000078 .L0 
GAS LISTING /tmp/ccRfXiBo.s 			page 23


  src/../h/riscv.hpp:258    .text:0000000000000078 .L0 
     /tmp/ccRfXiBo.s:155    .text:0000000000000080 .L0 
     /tmp/ccRfXiBo.s:156    .text:0000000000000080 .L0 
     /tmp/ccRfXiBo.s:161    .text:0000000000000084 .L0 
     /tmp/ccRfXiBo.s:162    .text:0000000000000084 .L0 
     /tmp/ccRfXiBo.s:164    .text:0000000000000084 .L0 
     /tmp/ccRfXiBo.s:178    .text:00000000000000b0 .L0 
     /tmp/ccRfXiBo.s:179    .text:00000000000000b0 .L0 
     /tmp/ccRfXiBo.s:182    .text:00000000000000b0 .L0 
     /tmp/ccRfXiBo.s:183    .text:00000000000000b0 .L0 
     /tmp/ccRfXiBo.s:184    .text:00000000000000b0 .L0 
  src/../h/riscv.hpp:139    .text:00000000000000b0 .L0 
     /tmp/ccRfXiBo.s:193    .text:00000000000000b8 .L0 
     /tmp/ccRfXiBo.s:194    .text:00000000000000b8 .L0 
     /tmp/ccRfXiBo.s:198    .text:00000000000000bc .L0 
     /tmp/ccRfXiBo.s:203    .text:00000000000000c0 .L0 
     /tmp/ccRfXiBo.s:204    .text:00000000000000c0 .L0 
     /tmp/ccRfXiBo.s:205    .text:00000000000000c0 .L0 
  src/../h/riscv.hpp:207    .text:00000000000000c0 .L0 
     /tmp/ccRfXiBo.s:213    .text:00000000000000c8 .L0 
     /tmp/ccRfXiBo.s:214    .text:00000000000000c8 .L0 
     /tmp/ccRfXiBo.s:219    .text:00000000000000cc .L0 
     /tmp/ccRfXiBo.s:220    .text:00000000000000cc .L0 
     /tmp/ccRfXiBo.s:221    .text:00000000000000cc .L0 
     /tmp/ccRfXiBo.s:222    .text:00000000000000cc .L0 
     /tmp/ccRfXiBo.s:263    .text:00000000000000fc .L0 
     /tmp/ccRfXiBo.s:270    .text:000000000000010c .L0 
     /tmp/ccRfXiBo.s:271    .text:000000000000010c .L0 
     /tmp/ccRfXiBo.s:272    .text:000000000000010c .L0 
     /tmp/ccRfXiBo.s:275    .text:0000000000000114 .L0 
     /tmp/ccRfXiBo.s:281    .text:0000000000000120 .L0 
     /tmp/ccRfXiBo.s:285    .text:0000000000000120 .L0 
     /tmp/ccRfXiBo.s:286    .text:0000000000000120 .L0 
  src/../h/riscv.hpp:213    .text:0000000000000120 .L0 
     /tmp/ccRfXiBo.s:298    .text:0000000000000124 .L0 
     /tmp/ccRfXiBo.s:299    .text:0000000000000124 .L0 
     /tmp/ccRfXiBo.s:300    .text:0000000000000124 .L0 
     /tmp/ccRfXiBo.s:311    .text:000000000000012c .L0 
     /tmp/ccRfXiBo.s:312    .text:000000000000012c .L0 
     /tmp/ccRfXiBo.s:317    .text:0000000000000130 .L0 
  src/../h/riscv.hpp:145    .text:0000000000000130 .L0 
     /tmp/ccRfXiBo.s:329    .text:0000000000000134 .L0 
     /tmp/ccRfXiBo.s:330    .text:0000000000000134 .L0 
     /tmp/ccRfXiBo.s:331    .text:0000000000000134 .L0 
     /tmp/ccRfXiBo.s:338    .text:000000000000013c .L0 
     /tmp/ccRfXiBo.s:344    .text:0000000000000140 .L0 
     /tmp/ccRfXiBo.s:348    .text:0000000000000140 .L0 
     /tmp/ccRfXiBo.s:349    .text:0000000000000140 .L0 
     /tmp/ccRfXiBo.s:618    .bss._ZGVZN15MemoryAllocator11getInstanceEvE8instance:0000000000000000 _ZGVZN15MemoryAllocator11getInstanceEvE8instance
     /tmp/ccRfXiBo.s:350    .text:0000000000000140 .L0 
     /tmp/ccRfXiBo.s:360    .text:0000000000000158 .L0 
     /tmp/ccRfXiBo.s:361    .text:0000000000000158 .L0 
     /tmp/ccRfXiBo.s:367    .text:0000000000000164 .L0 
     /tmp/ccRfXiBo.s:368    .text:0000000000000164 .L0 
  src/../h/riscv.hpp:267    .text:0000000000000164 .L0 
     /tmp/ccRfXiBo.s:381    .text:0000000000000168 .L0 
     /tmp/ccRfXiBo.s:382    .text:0000000000000168 .L0 
GAS LISTING /tmp/ccRfXiBo.s 			page 24


  src/../h/riscv.hpp:213    .text:0000000000000168 .L0 
     /tmp/ccRfXiBo.s:394    .text:000000000000016c .L0 
     /tmp/ccRfXiBo.s:395    .text:000000000000016c .L0 
  src/../h/riscv.hpp:145    .text:000000000000016c .L0 
     /tmp/ccRfXiBo.s:402    .text:0000000000000170 .L0 
     /tmp/ccRfXiBo.s:408    .text:0000000000000174 .L0 
     /tmp/ccRfXiBo.s:411    .text:0000000000000174 .L0 
     /tmp/ccRfXiBo.s:412    .text:0000000000000174 .L0 
     /tmp/ccRfXiBo.s:413    .text:0000000000000174 .L0 
     /tmp/ccRfXiBo.s:423    .text:000000000000018c .L0 
     /tmp/ccRfXiBo.s:424    .text:000000000000018c .L0 
     /tmp/ccRfXiBo.s:430    .text:0000000000000198 .L0 
  src/../h/riscv.hpp:267    .text:0000000000000198 .L0 
     /tmp/ccRfXiBo.s:437    .text:000000000000019c .L0 
     /tmp/ccRfXiBo.s:443    .text:00000000000001a0 .L0 
     /tmp/ccRfXiBo.s:444    .text:00000000000001a0 .L0 
     /tmp/ccRfXiBo.s:448    .text:00000000000001a4 .L0 
     /tmp/ccRfXiBo.s:449    .text:00000000000001a4 .L0 
     /tmp/ccRfXiBo.s:450    .text:00000000000001a4 .L0 
     /tmp/ccRfXiBo.s:460    .text:00000000000001bc .L0 
     /tmp/ccRfXiBo.s:461    .text:00000000000001bc .L0 
     /tmp/ccRfXiBo.s:468    .text:00000000000001cc .L0 
     /tmp/ccRfXiBo.s:469    .text:00000000000001cc .L0 
     /tmp/ccRfXiBo.s:470    .text:00000000000001cc .L0 
     /tmp/ccRfXiBo.s:477    .text:00000000000001d8 .L0 
     /tmp/ccRfXiBo.s:478    .text:00000000000001d8 .L0 
     /tmp/ccRfXiBo.s:480    .text:00000000000001dc .L0 
     /tmp/ccRfXiBo.s:481    .text:00000000000001dc .L0 
     /tmp/ccRfXiBo.s:483    .text:00000000000001e0 .L0 
     /tmp/ccRfXiBo.s:484    .text:00000000000001e0 .L0 
     /tmp/ccRfXiBo.s:486    .text:00000000000001e4 .L0 
     /tmp/ccRfXiBo.s:491    .text:00000000000001ec .L0 
     /tmp/ccRfXiBo.s:495    .text:00000000000001fc .L0 
     /tmp/ccRfXiBo.s:496    .text:00000000000001fc .L0 
     /tmp/ccRfXiBo.s:498    .text:0000000000000200 .L0 
     /tmp/ccRfXiBo.s:499    .text:0000000000000200 .L0 
     /tmp/ccRfXiBo.s:504    .text:0000000000000204 .L0 
     /tmp/ccRfXiBo.s:509    .text:0000000000000208 .L0 
     /tmp/ccRfXiBo.s:510    .text:0000000000000208 .L0 
     /tmp/ccRfXiBo.s:511    .text:0000000000000208 .L0 
     /tmp/ccRfXiBo.s:518    .text:0000000000000210 .L0 
     /tmp/ccRfXiBo.s:524    .text:0000000000000214 .L0 
     /tmp/ccRfXiBo.s:531    .text:000000000000021c .L0 
     /tmp/ccRfXiBo.s:539    .text:0000000000000224 .L0 
     /tmp/ccRfXiBo.s:540    .text:0000000000000224 .L0 
     /tmp/ccRfXiBo.s:541    .text:0000000000000224 .L0 
     /tmp/ccRfXiBo.s:546    .text:000000000000022c .L0 
  src/../h/riscv.hpp:267    .text:000000000000022c .L0 
     /tmp/ccRfXiBo.s:553    .text:0000000000000230 .L0 
     /tmp/ccRfXiBo.s:559    .text:0000000000000234 .L0 
     /tmp/ccRfXiBo.s:560    .text:0000000000000234 .L0 
     /tmp/ccRfXiBo.s:561    .text:0000000000000234 .L0 
     /tmp/ccRfXiBo.s:564    .text:000000000000023c .L0 
     /tmp/ccRfXiBo.s:568    .text:0000000000000240 .L0 
     /tmp/ccRfXiBo.s:571    .text:0000000000000240 .L0 
     /tmp/ccRfXiBo.s:572    .text:0000000000000240 .L0 
     /tmp/ccRfXiBo.s:573    .text:0000000000000240 .L0 
GAS LISTING /tmp/ccRfXiBo.s 			page 25


     /tmp/ccRfXiBo.s:587    .text:0000000000000248 .L0 
     /tmp/ccRfXiBo.s:588    .text:000000000000024c .L0 
     /tmp/ccRfXiBo.s:590    .text:0000000000000250 .L0 
     /tmp/ccRfXiBo.s:591    .text:0000000000000250 .L0 
     /tmp/ccRfXiBo.s:593    .text:0000000000000254 .L0 
     /tmp/ccRfXiBo.s:596    .text:0000000000000258 .L0 
     /tmp/ccRfXiBo.s:599    .text:000000000000025c .L0 
     /tmp/ccRfXiBo.s:602    .text:0000000000000260 .L0 
     /tmp/ccRfXiBo.s:604    .text:0000000000000264 .L0 
     /tmp/ccRfXiBo.s:606    .text:0000000000000268 .L0 
     /tmp/ccRfXiBo.s:608    .text:000000000000026c .L0 
     /tmp/ccRfXiBo.s:610    .text:0000000000000270 .L0 
     /tmp/ccRfXiBo.s:624    .text:0000000000000270 .L0 
     /tmp/ccRfXiBo.s:237    .rodata:0000000000000000 .L12
     /tmp/ccRfXiBo.s:229    .text:00000000000000e4 .L0 
     /tmp/ccRfXiBo.s:350    .text:0000000000000140 .L0 
     /tmp/ccRfXiBo.s:354    .text:0000000000000150 .L0 
     /tmp/ccRfXiBo.s:413    .text:0000000000000174 .L0 
     /tmp/ccRfXiBo.s:417    .text:0000000000000184 .L0 
     /tmp/ccRfXiBo.s:450    .text:00000000000001a4 .L0 
     /tmp/ccRfXiBo.s:454    .text:00000000000001b4 .L0 
     /tmp/ccRfXiBo.s:491    .text:00000000000001ec .L0 
     /tmp/ccRfXiBo.s:566    .text:0000000000000240 .L4
     /tmp/ccRfXiBo.s:260    .text:00000000000000fc .L5
     /tmp/ccRfXiBo.s:581    .text:0000000000000248 .L3
     /tmp/ccRfXiBo.s:277    .text:0000000000000118 .L9
     /tmp/ccRfXiBo.s:375    .text:0000000000000168 .L10
     /tmp/ccRfXiBo.s:356    .text:0000000000000158 .L18
     /tmp/ccRfXiBo.s:419    .text:000000000000018c .L19
     /tmp/ccRfXiBo.s:520    .text:0000000000000214 .L23
     /tmp/ccRfXiBo.s:456    .text:00000000000001bc .L21
     /tmp/ccRfXiBo.s:527    .text:000000000000021c .L24
     /tmp/ccRfXiBo.s:466    .text:00000000000001cc .L20
     /tmp/ccRfXiBo.s:489    .text:00000000000001ec .L22
     /tmp/ccRfXiBo.s:340    .text:0000000000000140 .L16
     /tmp/ccRfXiBo.s:404    .text:0000000000000174 .L15
     /tmp/ccRfXiBo.s:439    .text:00000000000001a0 .L14
     /tmp/ccRfXiBo.s:535    .text:0000000000000224 .L13
     /tmp/ccRfXiBo.s:555    .text:0000000000000234 .L11
     /tmp/ccRfXiBo.s:2118   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccRfXiBo.s:3783   .debug_str:000000000000071c .LASF137
     /tmp/ccRfXiBo.s:3719   .debug_str:0000000000000570 .LASF138
     /tmp/ccRfXiBo.s:3583   .debug_str:00000000000001a7 .LASF139
     /tmp/ccRfXiBo.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccRfXiBo.s:621    .text:0000000000000270 .Letext0
     /tmp/ccRfXiBo.s:3521   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccRfXiBo.s:3691   .debug_str:00000000000004f5 .LASF0
     /tmp/ccRfXiBo.s:3713   .debug_str:0000000000000545 .LASF1
     /tmp/ccRfXiBo.s:3671   .debug_str:0000000000000471 .LASF2
     /tmp/ccRfXiBo.s:3637   .debug_str:000000000000039a .LASF4
     /tmp/ccRfXiBo.s:3757   .debug_str:000000000000065f .LASF3
     /tmp/ccRfXiBo.s:3553   .debug_str:00000000000000e4 .LASF5
     /tmp/ccRfXiBo.s:3717   .debug_str:000000000000055d .LASF6
     /tmp/ccRfXiBo.s:3689   .debug_str:00000000000004e2 .LASF7
     /tmp/ccRfXiBo.s:3795   .debug_str:0000000000000837 .LASF8
     /tmp/ccRfXiBo.s:3623   .debug_str:000000000000032f .LASF9
     /tmp/ccRfXiBo.s:3733   .debug_str:00000000000005b8 .LASF10
GAS LISTING /tmp/ccRfXiBo.s 			page 26


     /tmp/ccRfXiBo.s:3787   .debug_str:00000000000007ec .LASF11
     /tmp/ccRfXiBo.s:3559   .debug_str:00000000000000f5 .LASF12
     /tmp/ccRfXiBo.s:3531   .debug_str:0000000000000045 .LASF13
     /tmp/ccRfXiBo.s:3575   .debug_str:000000000000017c .LASF14
     /tmp/ccRfXiBo.s:3747   .debug_str:0000000000000600 .LASF15
     /tmp/ccRfXiBo.s:3585   .debug_str:00000000000001ca .LASF16
     /tmp/ccRfXiBo.s:3581   .debug_str:00000000000001a1 .LASF140
     /tmp/ccRfXiBo.s:3775   .debug_str:00000000000006de .LASF17
     /tmp/ccRfXiBo.s:3819   .debug_str:00000000000008e9 .LASF18
     /tmp/ccRfXiBo.s:3667   .debug_str:0000000000000458 .LASF27
     /tmp/ccRfXiBo.s:3597   .debug_str:0000000000000266 .LASF53
     /tmp/ccRfXiBo.s:3797   .debug_str:0000000000000847 .LASF19
     /tmp/ccRfXiBo.s:3773   .debug_str:00000000000006cf .LASF20
     /tmp/ccRfXiBo.s:3785   .debug_str:00000000000007e0 .LASF43
     /tmp/ccRfXiBo.s:3551   .debug_str:00000000000000c0 .LASF45
     /tmp/ccRfXiBo.s:3725   .debug_str:000000000000058e .LASF39
     /tmp/ccRfXiBo.s:3781   .debug_str:0000000000000700 .LASF41
     /tmp/ccRfXiBo.s:3707   .debug_str:0000000000000530 .LASF21
     /tmp/ccRfXiBo.s:3591   .debug_str:0000000000000207 .LASF23
     /tmp/ccRfXiBo.s:3657   .debug_str:000000000000041a .LASF22
     /tmp/ccRfXiBo.s:3647   .debug_str:00000000000003c3 .LASF24
     /tmp/ccRfXiBo.s:3793   .debug_str:000000000000081b .LASF35
     /tmp/ccRfXiBo.s:3683   .debug_str:00000000000004bd .LASF25
     /tmp/ccRfXiBo.s:3651   .debug_str:00000000000003f2 .LASF26
     /tmp/ccRfXiBo.s:3539   .debug_str:0000000000000071 .LASF141
     /tmp/ccRfXiBo.s:3627   .debug_str:0000000000000353 .LASF57
     /tmp/ccRfXiBo.s:3731   .debug_str:00000000000005b2 .LASF28
     /tmp/ccRfXiBo.s:3729   .debug_str:00000000000005aa .LASF29
     /tmp/ccRfXiBo.s:3751   .debug_str:0000000000000627 .LASF30
     /tmp/ccRfXiBo.s:3765   .debug_str:000000000000069b .LASF31
     /tmp/ccRfXiBo.s:3743   .debug_str:00000000000005f0 .LASF32
     /tmp/ccRfXiBo.s:3567   .debug_str:0000000000000122 .LASF33
     /tmp/ccRfXiBo.s:3721   .debug_str:000000000000057e .LASF34
     /tmp/ccRfXiBo.s:3727   .debug_str:0000000000000593 .LASF36
     /tmp/ccRfXiBo.s:3681   .debug_str:00000000000004b4 .LASF37
     /tmp/ccRfXiBo.s:3541   .debug_str:0000000000000079 .LASF38
     /tmp/ccRfXiBo.s:3695   .debug_str:0000000000000509 .LASF40
     /tmp/ccRfXiBo.s:3631   .debug_str:0000000000000361 .LASF42
     /tmp/ccRfXiBo.s:3661   .debug_str:000000000000043d .LASF44
     /tmp/ccRfXiBo.s:3533   .debug_str:0000000000000055 .LASF46
     /tmp/ccRfXiBo.s:3605   .debug_str:00000000000002b8 .LASF142
     /tmp/ccRfXiBo.s:3801   .debug_str:000000000000086a .LASF143
     /tmp/ccRfXiBo.s:3571   .debug_str:000000000000014a .LASF144
     /tmp/ccRfXiBo.s:3771   .debug_str:00000000000006c7 .LASF123
     /tmp/ccRfXiBo.s:3525   .debug_str:0000000000000008 .LASF125
     /tmp/ccRfXiBo.s:3769   .debug_str:00000000000006b1 .LASF145
     /tmp/ccRfXiBo.s:3741   .debug_str:00000000000005eb .LASF146
     /tmp/ccRfXiBo.s:3641   .debug_str:00000000000003ad .LASF47
     /tmp/ccRfXiBo.s:3697   .debug_str:0000000000000512 .LASF48
     /tmp/ccRfXiBo.s:3699   .debug_str:0000000000000518 .LASF49
     /tmp/ccRfXiBo.s:3645   .debug_str:00000000000003bb .LASF50
     /tmp/ccRfXiBo.s:3545   .debug_str:000000000000009b .LASF51
     /tmp/ccRfXiBo.s:3711   .debug_str:000000000000053f .LASF52
     /tmp/ccRfXiBo.s:3635   .debug_str:000000000000038a .LASF54
     /tmp/ccRfXiBo.s:3611   .debug_str:00000000000002e9 .LASF55
     /tmp/ccRfXiBo.s:3709   .debug_str:0000000000000539 .LASF56
     /tmp/ccRfXiBo.s:3649   .debug_str:00000000000003e7 .LASF58
GAS LISTING /tmp/ccRfXiBo.s 			page 27


     /tmp/ccRfXiBo.s:3735   .debug_str:00000000000005c7 .LASF59
     /tmp/ccRfXiBo.s:3643   .debug_str:00000000000003b2 .LASF60
     /tmp/ccRfXiBo.s:3745   .debug_str:00000000000005f5 .LASF61
     /tmp/ccRfXiBo.s:3813   .debug_str:00000000000008b5 .LASF62
     /tmp/ccRfXiBo.s:3547   .debug_str:00000000000000a1 .LASF63
     /tmp/ccRfXiBo.s:3603   .debug_str:000000000000029d .LASF64
     /tmp/ccRfXiBo.s:3613   .debug_str:00000000000002ee .LASF65
     /tmp/ccRfXiBo.s:3527   .debug_str:000000000000001a .LASF66
     /tmp/ccRfXiBo.s:3669   .debug_str:0000000000000468 .LASF67
     /tmp/ccRfXiBo.s:3607   .debug_str:00000000000002c0 .LASF68
     /tmp/ccRfXiBo.s:3601   .debug_str:0000000000000294 .LASF69
     /tmp/ccRfXiBo.s:3599   .debug_str:000000000000027f .LASF70
     /tmp/ccRfXiBo.s:3759   .debug_str:0000000000000671 .LASF71
     /tmp/ccRfXiBo.s:3737   .debug_str:00000000000005d0 .LASF72
     /tmp/ccRfXiBo.s:3789   .debug_str:00000000000007fb .LASF73
     /tmp/ccRfXiBo.s:3621   .debug_str:000000000000031c .LASF74
     /tmp/ccRfXiBo.s:3617   .debug_str:000000000000030e .LASF75
     /tmp/ccRfXiBo.s:3587   .debug_str:00000000000001e0 .LASF76
     /tmp/ccRfXiBo.s:3523   .debug_str:0000000000000000 .LASF77
     /tmp/ccRfXiBo.s:3761   .debug_str:0000000000000678 .LASF78
     /tmp/ccRfXiBo.s:3805   .debug_str:000000000000088c .LASF79
     /tmp/ccRfXiBo.s:3803   .debug_str:0000000000000878 .LASF80
     /tmp/ccRfXiBo.s:3629   .debug_str:0000000000000359 .LASF81
     /tmp/ccRfXiBo.s:3609   .debug_str:00000000000002d5 .LASF82
     /tmp/ccRfXiBo.s:3693   .debug_str:0000000000000502 .LASF83
     /tmp/ccRfXiBo.s:3809   .debug_str:000000000000089d .LASF84
     /tmp/ccRfXiBo.s:3653   .debug_str:000000000000040e .LASF85
     /tmp/ccRfXiBo.s:3615   .debug_str:00000000000002fb .LASF86
     /tmp/ccRfXiBo.s:3619   .debug_str:0000000000000316 .LASF87
     /tmp/ccRfXiBo.s:3779   .debug_str:00000000000006ee .LASF88
     /tmp/ccRfXiBo.s:3543   .debug_str:0000000000000095 .LASF89
     /tmp/ccRfXiBo.s:3823   .debug_str:00000000000008f3 .LASF90
     /tmp/ccRfXiBo.s:3817   .debug_str:00000000000008de .LASF91
     /tmp/ccRfXiBo.s:3753   .debug_str:0000000000000631 .LASF92
     /tmp/ccRfXiBo.s:3777   .debug_str:00000000000006e3 .LASF93
     /tmp/ccRfXiBo.s:3659   .debug_str:0000000000000425 .LASF94
     /tmp/ccRfXiBo.s:3573   .debug_str:0000000000000172 .LASF95
     /tmp/ccRfXiBo.s:3633   .debug_str:0000000000000374 .LASF96
     /tmp/ccRfXiBo.s:3677   .debug_str:0000000000000499 .LASF97
     /tmp/ccRfXiBo.s:3625   .debug_str:000000000000033d .LASF98
     /tmp/ccRfXiBo.s:3687   .debug_str:00000000000004db .LASF99
     /tmp/ccRfXiBo.s:3589   .debug_str:00000000000001f4 .LASF100
     /tmp/ccRfXiBo.s:3535   .debug_str:0000000000000064 .LASF101
     /tmp/ccRfXiBo.s:3673   .debug_str:000000000000047f .LASF102
     /tmp/ccRfXiBo.s:3763   .debug_str:000000000000068c .LASF103
     /tmp/ccRfXiBo.s:3569   .debug_str:000000000000012e .LASF104
     /tmp/ccRfXiBo.s:3715   .debug_str:0000000000000558 .LASF105
     /tmp/ccRfXiBo.s:3663   .debug_str:0000000000000442 .LASF106
     /tmp/ccRfXiBo.s:3555   .debug_str:00000000000000eb .LASF107
     /tmp/ccRfXiBo.s:3679   .debug_str:00000000000004a3 .LASF108
     /tmp/ccRfXiBo.s:3655   .debug_str:0000000000000415 .LASF109
     /tmp/ccRfXiBo.s:3815   .debug_str:00000000000008cd .LASF110
     /tmp/ccRfXiBo.s:3557   .debug_str:00000000000000f0 .LASF111
     /tmp/ccRfXiBo.s:3529   .debug_str:0000000000000034 .LASF112
     /tmp/ccRfXiBo.s:3723   .debug_str:0000000000000589 .LASF113
     /tmp/ccRfXiBo.s:3549   .debug_str:00000000000000af .LASF114
     /tmp/ccRfXiBo.s:3705   .debug_str:000000000000052b .LASF115
GAS LISTING /tmp/ccRfXiBo.s 			page 28


     /tmp/ccRfXiBo.s:3565   .debug_str:0000000000000111 .LASF116
     /tmp/ccRfXiBo.s:3665   .debug_str:0000000000000453 .LASF117
     /tmp/ccRfXiBo.s:3749   .debug_str:0000000000000616 .LASF118
     /tmp/ccRfXiBo.s:3561   .debug_str:0000000000000105 .LASF119
     /tmp/ccRfXiBo.s:3577   .debug_str:0000000000000188 .LASF120
     /tmp/ccRfXiBo.s:3579   .debug_str:0000000000000199 .LASF121
     /tmp/ccRfXiBo.s:3685   .debug_str:00000000000004c7 .LASF122
     /tmp/ccRfXiBo.s:3639   .debug_str:00000000000003a1 .LASF124
     /tmp/ccRfXiBo.s:3791   .debug_str:0000000000000802 .LASF126
     /tmp/ccRfXiBo.s:3807   .debug_str:0000000000000894 .LASF127
     /tmp/ccRfXiBo.s:46     .text:0000000000000020 .LFB49
     /tmp/ccRfXiBo.s:611    .text:0000000000000270 .LFE49
     /tmp/ccRfXiBo.s:3563   .debug_str:000000000000010a .LASF128
     /tmp/ccRfXiBo.s:3243   .debug_loc:0000000000000000 .LLST0
     /tmp/ccRfXiBo.s:3264   .debug_loc:000000000000005e .LLST1
     /tmp/ccRfXiBo.s:3283   .debug_loc:00000000000000ba .LLST2
     /tmp/ccRfXiBo.s:3290   .debug_loc:00000000000000dd .LLST3
     /tmp/ccRfXiBo.s:3297   .debug_loc:0000000000000100 .LLST4
     /tmp/ccRfXiBo.s:3703   .debug_str:0000000000000526 .LASF129
     /tmp/ccRfXiBo.s:3304   .debug_loc:0000000000000123 .LLST5
     /tmp/ccRfXiBo.s:3739   .debug_str:00000000000005e3 .LASF130
     /tmp/ccRfXiBo.s:3315   .debug_loc:0000000000000159 .LLST6
     /tmp/ccRfXiBo.s:3507   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccRfXiBo.s:3326   .debug_loc:000000000000018f .LLST7
     /tmp/ccRfXiBo.s:3333   .debug_loc:00000000000001b2 .LLST8
     /tmp/ccRfXiBo.s:3675   .debug_str:0000000000000492 .LASF131
     /tmp/ccRfXiBo.s:3354   .debug_loc:0000000000000210 .LLST9
     /tmp/ccRfXiBo.s:180    .text:00000000000000b0 .LBB66
     /tmp/ccRfXiBo.s:196    .text:00000000000000bc .LBE66
     /tmp/ccRfXiBo.s:201    .text:00000000000000c0 .LBB68
     /tmp/ccRfXiBo.s:217    .text:00000000000000cc .LBE68
     /tmp/ccRfXiBo.s:283    .text:0000000000000120 .LBB70
     /tmp/ccRfXiBo.s:294    .text:0000000000000124 .LBE70
     /tmp/ccRfXiBo.s:3365   .debug_loc:0000000000000246 .LLST10
     /tmp/ccRfXiBo.s:296    .text:0000000000000124 .LBB72
     /tmp/ccRfXiBo.s:309    .text:000000000000012c .LBE72
     /tmp/ccRfXiBo.s:3372   .debug_loc:0000000000000269 .LLST11
     /tmp/ccRfXiBo.s:314    .text:0000000000000130 .LBB74
     /tmp/ccRfXiBo.s:325    .text:0000000000000134 .LBE74
     /tmp/ccRfXiBo.s:3381   .debug_loc:000000000000028f .LLST12
     /tmp/ccRfXiBo.s:327    .text:0000000000000134 .LBB76
     /tmp/ccRfXiBo.s:342    .text:0000000000000140 .LBE76
     /tmp/ccRfXiBo.s:3388   .debug_loc:00000000000002b2 .LLST13
     /tmp/ccRfXiBo.s:345    .text:0000000000000140 .LBB78
     /tmp/ccRfXiBo.s:359    .text:0000000000000158 .LBE78
     /tmp/ccRfXiBo.s:365    .text:0000000000000164 .LBB80
     /tmp/ccRfXiBo.s:377    .text:0000000000000168 .LBE80
     /tmp/ccRfXiBo.s:379    .text:0000000000000168 .LBB82
     /tmp/ccRfXiBo.s:390    .text:000000000000016c .LBE82
     /tmp/ccRfXiBo.s:3396   .debug_loc:00000000000002d6 .LLST15
     /tmp/ccRfXiBo.s:392    .text:000000000000016c .LBB84
     /tmp/ccRfXiBo.s:406    .text:0000000000000174 .LBE84
     /tmp/ccRfXiBo.s:3403   .debug_loc:00000000000002f9 .LLST16
     /tmp/ccRfXiBo.s:409    .text:0000000000000174 .LBB86
     /tmp/ccRfXiBo.s:422    .text:000000000000018c .LBE86
     /tmp/ccRfXiBo.s:427    .text:0000000000000198 .LBB88
     /tmp/ccRfXiBo.s:441    .text:00000000000001a0 .LBE88
GAS LISTING /tmp/ccRfXiBo.s 			page 29


     /tmp/ccRfXiBo.s:3410   .debug_loc:000000000000031c .LLST17
     /tmp/ccRfXiBo.s:446    .text:00000000000001a4 .LBB90
     /tmp/ccRfXiBo.s:459    .text:00000000000001bc .LBE90
     /tmp/ccRfXiBo.s:473    .text:00000000000001d8 .LBB92
     /tmp/ccRfXiBo.s:3417   .debug_loc:000000000000033f .LLST18
     /tmp/ccRfXiBo.s:3438   .debug_loc:000000000000039d .LLST19
     /tmp/ccRfXiBo.s:3449   .debug_loc:00000000000003d3 .LLST20
     /tmp/ccRfXiBo.s:3460   .debug_loc:0000000000000409 .LLST21
     /tmp/ccRfXiBo.s:507    .text:0000000000000208 .LBB95
     /tmp/ccRfXiBo.s:522    .text:0000000000000214 .LBE95
     /tmp/ccRfXiBo.s:3471   .debug_loc:000000000000043f .LLST22
     /tmp/ccRfXiBo.s:543    .text:000000000000022c .LBB98
     /tmp/ccRfXiBo.s:557    .text:0000000000000234 .LBE98
     /tmp/ccRfXiBo.s:3479   .debug_loc:0000000000000463 .LLST23
     /tmp/ccRfXiBo.s:569    .text:0000000000000240 .LBB100
     /tmp/ccRfXiBo.s:583    .text:0000000000000248 .LBE100
     /tmp/ccRfXiBo.s:3486   .debug_loc:0000000000000486 .LLST24
     /tmp/ccRfXiBo.s:273    .text:0000000000000114 .LVL12
     /tmp/ccRfXiBo.s:363    .text:0000000000000164 .LVL23
     /tmp/ccRfXiBo.s:426    .text:0000000000000198 .LVL29
     /tmp/ccRfXiBo.s:463    .text:00000000000001c8 .LVL33
     /tmp/ccRfXiBo.s:472    .text:00000000000001d8 .LVL35
     /tmp/ccRfXiBo.s:542    .text:000000000000022c .LVL43
     /tmp/ccRfXiBo.s:562    .text:000000000000023c .LVL45
     /tmp/ccRfXiBo.s:70     .text:0000000000000048 .LBB54
     /tmp/ccRfXiBo.s:87     .text:0000000000000054 .LBE54
     /tmp/ccRfXiBo.s:89     .text:0000000000000054 .LBB56
     /tmp/ccRfXiBo.s:105    .text:0000000000000060 .LBE56
     /tmp/ccRfXiBo.s:107    .text:0000000000000060 .LBB58
     /tmp/ccRfXiBo.s:123    .text:000000000000006c .LBE58
     /tmp/ccRfXiBo.s:125    .text:000000000000006c .LBB60
     /tmp/ccRfXiBo.s:141    .text:0000000000000078 .LBE60
     /tmp/ccRfXiBo.s:143    .text:0000000000000078 .LBB62
     /tmp/ccRfXiBo.s:159    .text:0000000000000084 .LBE62
     /tmp/ccRfXiBo.s:10     .text:0000000000000000 .LFB48
     /tmp/ccRfXiBo.s:40     .text:0000000000000020 .LFE48
     /tmp/ccRfXiBo.s:3821   .debug_str:00000000000008ee .LASF132
     /tmp/ccRfXiBo.s:3811   .debug_str:00000000000008b0 .LASF134
     /tmp/ccRfXiBo.s:3755   .debug_str:0000000000000649 .LASF135
     /tmp/ccRfXiBo.s:3701   .debug_str:000000000000051d .LASF133
     /tmp/ccRfXiBo.s:3593   .debug_str:0000000000000227 .LASF147
     /tmp/ccRfXiBo.s:3799   .debug_str:0000000000000851 .LASF136
     /tmp/ccRfXiBo.s:3595   .debug_str:0000000000000256 .LASF148
     /tmp/ccRfXiBo.s:3537   .debug_str:000000000000006b .LASF149
     /tmp/ccRfXiBo.s:3767   .debug_str:00000000000006a4 .LASF150
     /tmp/ccRfXiBo.s:85     .text:0000000000000054 .LVL0
     /tmp/ccRfXiBo.s:173    .text:00000000000000a8 .LVL5
     /tmp/ccRfXiBo.s:189    .text:00000000000000b4 .LVL6
     /tmp/ccRfXiBo.s:259    .text:00000000000000fc .LVL10
     /tmp/ccRfXiBo.s:565    .text:0000000000000240 .LVL46
     /tmp/ccRfXiBo.s:579    .text:0000000000000248 .LVL48
     /tmp/ccRfXiBo.s:103    .text:0000000000000060 .LVL1
     /tmp/ccRfXiBo.s:228    .text:00000000000000e4 .LVL9
     /tmp/ccRfXiBo.s:264    .text:0000000000000100 .LVL11
     /tmp/ccRfXiBo.s:276    .text:0000000000000118 .LVL13
     /tmp/ccRfXiBo.s:301    .text:0000000000000128 .LVL16
     /tmp/ccRfXiBo.s:574    .text:0000000000000244 .LVL47
GAS LISTING /tmp/ccRfXiBo.s 			page 30


     /tmp/ccRfXiBo.s:121    .text:000000000000006c .LVL2
     /tmp/ccRfXiBo.s:594    .text:0000000000000254 .LVL49
     /tmp/ccRfXiBo.s:139    .text:0000000000000078 .LVL3
     /tmp/ccRfXiBo.s:600    .text:000000000000025c .LVL51
     /tmp/ccRfXiBo.s:157    .text:0000000000000084 .LVL4
     /tmp/ccRfXiBo.s:597    .text:0000000000000258 .LVL50
     /tmp/ccRfXiBo.s:199    .text:00000000000000c0 .LVL7
     /tmp/ccRfXiBo.s:215    .text:00000000000000cc .LVL8
     /tmp/ccRfXiBo.s:373    .text:0000000000000168 .LVL24
     /tmp/ccRfXiBo.s:465    .text:00000000000001cc .LVL34
     /tmp/ccRfXiBo.s:488    .text:00000000000001ec .LVL36
     /tmp/ccRfXiBo.s:505    .text:0000000000000208 .LVL38
     /tmp/ccRfXiBo.s:526    .text:000000000000021c .LVL40
     /tmp/ccRfXiBo.s:532    .text:0000000000000220 .LVL41
     /tmp/ccRfXiBo.s:534    .text:0000000000000224 .LVL42
     /tmp/ccRfXiBo.s:519    .text:0000000000000214 .LVL39
     /tmp/ccRfXiBo.s:282    .text:0000000000000120 .LVL14
     /tmp/ccRfXiBo.s:291    .text:0000000000000124 .LVL15
     /tmp/ccRfXiBo.s:306    .text:000000000000012c .LVL17
     /tmp/ccRfXiBo.s:313    .text:0000000000000130 .LVL18
     /tmp/ccRfXiBo.s:322    .text:0000000000000134 .LVL19
     /tmp/ccRfXiBo.s:339    .text:0000000000000140 .LVL20
     /tmp/ccRfXiBo.s:387    .text:000000000000016c .LVL25
     /tmp/ccRfXiBo.s:403    .text:0000000000000174 .LVL26
     /tmp/ccRfXiBo.s:438    .text:00000000000001a0 .LVL30
     /tmp/ccRfXiBo.s:500    .text:0000000000000204 .LVL37
     /tmp/ccRfXiBo.s:554    .text:0000000000000234 .LVL44
     /tmp/ccRfXiBo.s:625    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccRfXiBo.s:176    .text:00000000000000b0 .LBB65
     /tmp/ccRfXiBo.s:261    .text:00000000000000fc .LBE65
     /tmp/ccRfXiBo.s:268    .text:000000000000010c .LBB102
     /tmp/ccRfXiBo.s:584    .text:0000000000000248 .LBE102
     /tmp/ccRfXiBo.s:502    .text:0000000000000204 .LBE92
     /tmp/ccRfXiBo.s:528    .text:000000000000021c .LBB97
     /tmp/ccRfXiBo.s:537    .text:0000000000000224 .LBE97

UNDEFINED SYMBOLS
console_handler
_ZN15MemoryAllocator8allocateEm
_ZN15MemoryAllocator10deallocateEPv
_Znwm
_ZN3PCB7wrapperEv
_ZN3PCB4exitEv
_ZN3PCB8dispatchEv
